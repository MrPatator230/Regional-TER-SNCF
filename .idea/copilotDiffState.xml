<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/espace/admin/perturbations/lignes/[id]/page.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/espace/admin/perturbations/lignes/[id]/page.jsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import React, { useEffect, useState, useMemo } from 'react';&#10;import { useParams, useRouter } from 'next/navigation';&#10;import Link from 'next/link';&#10;&#10;const JOURS = [&quot;Lundi&quot;, &quot;Mardi&quot;, &quot;Mercredi&quot;, &quot;Jeudi&quot;, &quot;Vendredi&quot;, &quot;Samedi&quot;, &quot;Dimanche&quot;];&#10;&#10;export default function VoirPerturbationLigne() {&#10;  const params = useParams();&#10;  const router = useRouter();&#10;  const id = params?.id;&#10;&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState(&quot;&quot;);&#10;  const [perturbation, setPerturbation] = useState(null);&#10;  const [parsedData, setParsedData] = useState({});&#10;  const [sillonsMap, setSillonsMap] = useState({});&#10;  const [loadingSillons, setLoadingSillons] = useState(false);&#10;&#10;  // Récupération perturbation&#10;  useEffect(() =&gt; {&#10;    if (!id) return;&#10;    (async () =&gt; {&#10;      setLoading(true); setError(&quot;&quot;);&#10;      try {&#10;        const res = await fetch(`/api/perturbations/${id}`, { cache: 'no-store' });&#10;        const data = await res.json();&#10;        if (!res.ok) throw new Error(data?.error || 'Erreur de chargement');&#10;        const p = data.perturbation || {};&#10;        let pdata = {};&#10;        try { pdata = p.data ? (typeof p.data === 'string' ? JSON.parse(p.data) : p.data) : {}; } catch { pdata = {}; }&#10;        setPerturbation(p);&#10;        setParsedData(pdata);&#10;      } catch (e) {&#10;        setError(e.message || 'Erreur');&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    })();&#10;  }, [id]);&#10;&#10;  // Charger sillons si nécessaire pour afficher les noms (exclude_schedules / substitutions)&#10;  useEffect(() =&gt; {&#10;    if (!perturbation) return;&#10;    const exclude = parsedData?.exclude_schedules || [];&#10;    const subs = parsedData?.substitutions || [];&#10;    const need = [...new Set([...exclude, ...subs])];&#10;    if (!need.length || !perturbation.ligne_id) return;&#10;    (async () =&gt; {&#10;      setLoadingSillons(true);&#10;      try {&#10;        const res = await fetch(`/api/schedules?ligne_id=${perturbation.ligne_id}`);&#10;        const all = await res.json();&#10;        const map = {};&#10;        if (Array.isArray(all)) {&#10;          all.forEach(s =&gt; { map[s.id] = s; });&#10;        } else if (Array.isArray(all?.schedules)) {&#10;          all.schedules.forEach(s =&gt; { map[s.id] = s; });&#10;        }&#10;        setSillonsMap(map);&#10;      } catch {&#10;        // silencieux&#10;      } finally {&#10;        setLoadingSillons(false);&#10;      }&#10;    })();&#10;  }, [perturbation, parsedData]);&#10;&#10;  const horaires = useMemo(() =&gt; parsedData?.horaire_interruption || {}, [parsedData]);&#10;&#10;  if (loading) return &lt;div&gt;Chargement…&lt;/div&gt;;&#10;  if (error) return &lt;div className=&quot;text-danger&quot;&gt;{error}&lt;/div&gt;;&#10;  if (!perturbation) return &lt;div&gt;Introuvable&lt;/div&gt;;&#10;&#10;  const formatDate = d =&gt; {&#10;    if (!d) return '-';&#10;    const dt = new Date(d);&#10;    if (isNaN(dt.getTime())) return d;&#10;    return dt.toLocaleString();&#10;  };&#10;&#10;  const listSillons = ids =&gt; ids &amp;&amp; ids.length ? ids.map(i =&gt; {&#10;    const s = sillonsMap[i];&#10;    const dep = (s?.departure_time || s?.departureTime || '').slice(0,5);&#10;    const arr = (s?.arrival_time || s?.arrivalTime || '').slice(0,5);&#10;    return s ? `[${s.train_number || ('#'+s.id)}] (${dep} / ${arr})` : `#${i}`;&#10;  }).join(', ') : 'Aucun';&#10;&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;div className=&quot;d-flex justify-content-between align-items-center mb-3&quot;&gt;&#10;        &lt;h1 className=&quot;h4 mb-0&quot;&gt;Perturbation #{perturbation.id}&lt;/h1&gt;&#10;        &lt;div className=&quot;d-flex gap-2&quot;&gt;&#10;          &lt;Link href={`/espace/admin/perturbations/lignes/edition/${perturbation.id}`} className=&quot;btn btn-sm btn-primary&quot;&gt;Éditer&lt;/Link&gt;&#10;          &lt;button type=&quot;button&quot; className=&quot;btn btn-sm btn-outline-secondary&quot; onClick={() =&gt; router.back()}&gt;Retour&lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;mb-4&quot;&gt;&#10;        &lt;span className=&quot;badge bg-info me-2 text-uppercase&quot;&gt;{perturbation.type}&lt;/span&gt;&#10;        &lt;span className=&quot;badge bg-secondary&quot;&gt;Ligne #{perturbation.ligne_id}&lt;/span&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;row g-4&quot;&gt;&#10;        &lt;div className=&quot;col-lg-6&quot;&gt;&#10;          &lt;div className=&quot;card h-100&quot;&gt;&#10;            &lt;div className=&quot;card-header&quot;&gt;Diffusion&lt;/div&gt;&#10;            &lt;div className=&quot;card-body small&quot;&gt;&#10;              &lt;p&gt;&lt;strong&gt;Début :&lt;/strong&gt; {formatDate(perturbation.date_debut)}&lt;/p&gt;&#10;              &lt;p&gt;&lt;strong&gt;Fin :&lt;/strong&gt; {formatDate(perturbation.date_fin)}&lt;/p&gt;&#10;              {perturbation.type === 'travaux' &amp;&amp; (&#10;                &lt;&gt;&#10;                  &lt;p&gt;&lt;strong&gt;Jours :&lt;/strong&gt; {Array.isArray(parsedData.jours) &amp;&amp; parsedData.jours.length ? parsedData.jours.map(i =&gt; JOURS[i]).join(', ') : '-'}&lt;/p&gt;&#10;                  &lt;p&gt;&lt;strong&gt;Plage horaire :&lt;/strong&gt; {horaires?.debut || '-'} - {horaires?.fin || '-'}&lt;/p&gt;&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;col-lg-6&quot;&gt;&#10;          &lt;div className=&quot;card h-100&quot;&gt;&#10;            &lt;div className=&quot;card-header&quot;&gt;Circulation &amp; Substitutions&lt;/div&gt;&#10;            &lt;div className=&quot;card-body small&quot;&gt;&#10;              {perturbation.type === 'travaux' ? (&#10;                &lt;&gt;&#10;                  &lt;p&gt;&lt;strong&gt;Impact circulation :&lt;/strong&gt; {parsedData.exclude_schedules ? 'Oui' : 'Non'}&lt;/p&gt;&#10;                  {parsedData.exclude_schedules &amp;&amp; (&#10;                    &lt;p&gt;&lt;strong&gt;Sillons non circulants :&lt;/strong&gt;&lt;br /&gt; {loadingSillons ? 'Chargement…' : listSillons(parsedData.exclude_schedules)}&lt;/p&gt;&#10;                  )}&#10;                  &lt;p&gt;&lt;strong&gt;Substitutions :&lt;/strong&gt; {parsedData.substitutions ? 'Oui' : 'Non'}&lt;/p&gt;&#10;                  {parsedData.substitutions &amp;&amp; (&#10;                    &lt;p&gt;&lt;strong&gt;Sillons de substitution :&lt;/strong&gt;&lt;br /&gt; {loadingSillons ? 'Chargement…' : listSillons(parsedData.substitutions)}&lt;/p&gt;&#10;                  )}&#10;                &lt;/&gt;&#10;              ) : &lt;p&gt;Aucun impact circulation spécifique (type {perturbation.type}).&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;col-12&quot;&gt;&#10;          &lt;div className=&quot;card&quot;&gt;&#10;            &lt;div className=&quot;card-header&quot;&gt;Contenu&lt;/div&gt;&#10;            &lt;div className=&quot;card-body&quot;&gt;&#10;              &lt;h2 className=&quot;h5&quot;&gt;{perturbation.titre}&lt;/h2&gt;&#10;              &lt;div className=&quot;mt-3&quot; dangerouslySetInnerHTML={{ __html: perturbation.description || '&lt;em&gt;Aucun contenu.&lt;/em&gt;' }} /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;col-12&quot;&gt;&#10;          &lt;div className=&quot;card&quot;&gt;&#10;            &lt;div className=&quot;card-header&quot;&gt;Brut / Debug&lt;/div&gt;&#10;            &lt;div className=&quot;card-body small&quot;&gt;&#10;              &lt;pre className=&quot;mb-0 bg-light p-2 border rounded&quot; style={{maxHeight:300, overflow:'auto'}}&gt;{JSON.stringify({ ...perturbation, data: parsedData }, null, 2)}&lt;/pre&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import React, { useEffect, useState, useMemo } from 'react';&#10;import { useParams, useRouter } from 'next/navigation';&#10;import Link from 'next/link';&#10;&#10;const JOURS = [&quot;Lundi&quot;, &quot;Mardi&quot;, &quot;Mercredi&quot;, &quot;Jeudi&quot;, &quot;Vendredi&quot;, &quot;Samedi&quot;, &quot;Dimanche&quot;];&#10;&#10;export default function VoirPerturbationLigne() {&#10;  const params = useParams();&#10;  const router = useRouter();&#10;  const id = params?.id;&#10;&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState(&quot;&quot;);&#10;  const [perturbation, setPerturbation] = useState(null);&#10;  const [parsedData, setParsedData] = useState({});&#10;  const [sillonsMap, setSillonsMap] = useState({});&#10;  const [loadingSillons, setLoadingSillons] = useState(false);&#10;  const [lignes, setLignes] = useState([]);&#10;  const [loadingLignes, setLoadingLignes] = useState(false);&#10;&#10;  // Récupération perturbation&#10;  useEffect(() =&gt; {&#10;    if (!id) return;&#10;    (async () =&gt; {&#10;      setLoading(true); setError(&quot;&quot;);&#10;      try {&#10;        const res = await fetch(`/api/perturbations/${id}`, { cache: 'no-store' });&#10;        const data = await res.json();&#10;        if (!res.ok) throw new Error(data?.error || 'Erreur de chargement');&#10;        const p = data.perturbation || {};&#10;        let pdata = {};&#10;        try { pdata = p.data ? (typeof p.data === 'string' ? JSON.parse(p.data) : p.data) : {}; } catch { pdata = {}; }&#10;        setPerturbation(p);&#10;        setParsedData(pdata);&#10;      } catch (e) {&#10;        setError(e.message || 'Erreur');&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    })();&#10;  }, [id]);&#10;&#10;  // Charger sillons si nécessaire pour afficher les noms (exclude_schedules / substitutions)&#10;  useEffect(() =&gt; {&#10;    if (!perturbation) return;&#10;    const exclude = parsedData?.exclude_schedules || [];&#10;    const subs = parsedData?.substitutions || [];&#10;    const need = [...new Set([...exclude, ...subs])];&#10;    if (!need.length || !perturbation.ligne_id) return;&#10;    (async () =&gt; {&#10;      setLoadingSillons(true);&#10;      try {&#10;        const res = await fetch(`/api/schedules?ligne_id=${perturbation.ligne_id}`);&#10;        const all = await res.json();&#10;        const map = {};&#10;        if (Array.isArray(all)) {&#10;          all.forEach(s =&gt; { map[s.id] = s; });&#10;        } else if (Array.isArray(all?.schedules)) {&#10;          all.schedules.forEach(s =&gt; { map[s.id] = s; });&#10;        }&#10;        setSillonsMap(map);&#10;      } catch {&#10;        // silencieux&#10;      } finally {&#10;        setLoadingSillons(false);&#10;      }&#10;    })();&#10;  }, [perturbation, parsedData]);&#10;&#10;  // Charger les lignes pour libellé&#10;  useEffect(() =&gt; {&#10;    (async () =&gt; {&#10;      setLoadingLignes(true);&#10;      try {&#10;        const res = await fetch('/api/lignes', { cache: 'no-store' });&#10;        const data = await res.json();&#10;        if (res.ok) setLignes(data.lignes || []);&#10;      } catch { /* silencieux */ } finally { setLoadingLignes(false); }&#10;    })();&#10;  }, []);&#10;&#10;  const horaires = useMemo(() =&gt; parsedData?.horaire_interruption || {}, [parsedData]);&#10;  const ligneLabel = useMemo(() =&gt; {&#10;    if (!perturbation) return '';&#10;    const L = lignes.find(l =&gt; String(l.id) === String(perturbation.ligne_id));&#10;    return L ? `${L.depart_name || 'Inconnue'} &lt;&gt; ${L.arrivee_name || 'Inconnue'}` : `Ligne #${perturbation.ligne_id}`;&#10;  }, [lignes, perturbation]);&#10;&#10;  if (loading) return &lt;div&gt;Chargement…&lt;/div&gt;;&#10;  if (error) return &lt;div className=&quot;text-danger&quot;&gt;{error}&lt;/div&gt;;&#10;  if (!perturbation) return &lt;div&gt;Introuvable&lt;/div&gt;;&#10;&#10;  const formatDate = d =&gt; {&#10;    if (!d) return '-';&#10;    const dt = new Date(d);&#10;    if (isNaN(dt.getTime())) return d;&#10;    return dt.toLocaleString();&#10;  };&#10;&#10;  const listSillons = ids =&gt; ids &amp;&amp; ids.length ? ids.map(i =&gt; {&#10;    const s = sillonsMap[i];&#10;    const dep = (s?.departure_time || s?.departureTime || '').slice(0,5);&#10;    const arr = (s?.arrival_time || s?.arrivalTime || '').slice(0,5);&#10;    return s ? `[${s.train_number || ('#'+s.id)}] (${dep} / ${arr})` : `#${i}`;&#10;  }).join(', ') : 'Aucun';&#10;&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;div className=&quot;d-flex justify-content-between align-items-center mb-3&quot;&gt;&#10;        &lt;h1 className=&quot;h4 mb-0&quot;&gt;Perturbation #{perturbation.id}&lt;/h1&gt;&#10;        &lt;div className=&quot;d-flex gap-2&quot;&gt;&#10;          &lt;Link href={`/espace/admin/perturbations/lignes/edition/${perturbation.id}`} className=&quot;btn btn-sm btn-primary&quot;&gt;Éditer&lt;/Link&gt;&#10;          &lt;button type=&quot;button&quot; className=&quot;btn btn-sm btn-outline-secondary&quot; onClick={() =&gt; router.back()}&gt;Retour&lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;mb-4&quot;&gt;&#10;        &lt;span className=&quot;badge bg-info me-2 text-uppercase&quot;&gt;{perturbation.type}&lt;/span&gt;&#10;        &lt;span className=&quot;badge bg-secondary&quot;&gt;{loadingLignes ? 'Chargement…' : ligneLabel}&lt;/span&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;row g-4&quot;&gt;&#10;        &lt;div className=&quot;col-lg-6&quot;&gt;&#10;          &lt;div className=&quot;card h-100&quot;&gt;&#10;            &lt;div className=&quot;card-header&quot;&gt;Diffusion&lt;/div&gt;&#10;            &lt;div className=&quot;card-body small&quot;&gt;&#10;              &lt;p&gt;&lt;strong&gt;Début :&lt;/strong&gt; {formatDate(perturbation.date_debut)}&lt;/p&gt;&#10;              &lt;p&gt;&lt;strong&gt;Fin :&lt;/strong&gt; {formatDate(perturbation.date_fin)}&lt;/p&gt;&#10;              {perturbation.type === 'travaux' &amp;&amp; (&#10;                &lt;&gt;&#10;                  &lt;p&gt;&lt;strong&gt;Jours :&lt;/strong&gt; {Array.isArray(parsedData.jours) &amp;&amp; parsedData.jours.length ? parsedData.jours.map(i =&gt; JOURS[i]).join(', ') : '-'}&lt;/p&gt;&#10;                  &lt;p&gt;&lt;strong&gt;Plage horaire :&lt;/strong&gt; {horaires?.debut || '-'} - {horaires?.fin || '-'}&lt;/p&gt;&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;col-lg-6&quot;&gt;&#10;          &lt;div className=&quot;card h-100&quot;&gt;&#10;            &lt;div className=&quot;card-header&quot;&gt;Circulation &amp; Substitutions&lt;/div&gt;&#10;            &lt;div className=&quot;card-body small&quot;&gt;&#10;              {perturbation.type === 'travaux' ? (&#10;                &lt;&gt;&#10;                  &lt;p&gt;&lt;strong&gt;Impact circulation :&lt;/strong&gt; {parsedData.exclude_schedules ? 'Oui' : 'Non'}&lt;/p&gt;&#10;                  {parsedData.exclude_schedules &amp;&amp; (&#10;                    &lt;p&gt;&lt;strong&gt;Sillons non circulants :&lt;/strong&gt;&lt;br /&gt; {loadingSillons ? 'Chargement…' : listSillons(parsedData.exclude_schedules)}&lt;/p&gt;&#10;                  )}&#10;                  &lt;p&gt;&lt;strong&gt;Substitutions :&lt;/strong&gt; {parsedData.substitutions ? 'Oui' : 'Non'}&lt;/p&gt;&#10;                  {parsedData.substitutions &amp;&amp; (&#10;                    &lt;p&gt;&lt;strong&gt;Sillons de substitution :&lt;/strong&gt;&lt;br /&gt; {loadingSillons ? 'Chargement…' : listSillons(parsedData.substitutions)}&lt;/p&gt;&#10;                  )}&#10;                &lt;/&gt;&#10;              ) : &lt;p&gt;Aucun impact circulation spécifique (type {perturbation.type}).&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;col-12&quot;&gt;&#10;          &lt;div className=&quot;card&quot;&gt;&#10;            &lt;div className=&quot;card-header&quot;&gt;Contenu&lt;/div&gt;&#10;            &lt;div className=&quot;card-body&quot;&gt;&#10;              &lt;h2 className=&quot;h5&quot;&gt;{perturbation.titre}&lt;/h2&gt;&#10;              &lt;div className=&quot;mt-3&quot; dangerouslySetInnerHTML={{ __html: perturbation.description || '&lt;em&gt;Aucun contenu.&lt;/em&gt;' }} /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;col-12&quot;&gt;&#10;          &lt;div className=&quot;card&quot;&gt;&#10;            &lt;div className=&quot;card-header&quot;&gt;Brut / Debug&lt;/div&gt;&#10;            &lt;div className=&quot;card-body small&quot;&gt;&#10;              &lt;pre className=&quot;mb-0 bg-light p-2 border rounded&quot; style={{maxHeight:300, overflow:'auto'}}&gt;{JSON.stringify({ ...perturbation, data: parsedData }, null, 2)}&lt;/pre&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/espace/admin/perturbations/lignes/creation/page.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/espace/admin/perturbations/lignes/creation/page.jsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import React, { useState, useEffect } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { Editor } from '@tinymce/tinymce-react';&#10;&#10;const ETAPES = [&#10;  &quot;Général&quot;,&#10;  &quot;Diffusion&quot;,&#10;  &quot;Contenu&quot;,&#10;  &quot;Circulation&quot;,&#10;  &quot;Substitutions&quot;,&#10;  &quot;Récapitulatif&quot;&#10;];&#10;&#10;const PERTURB_TYPES = [&#10;  { value: &quot;travaux&quot;, label: &quot;Travaux&quot; },&#10;  { value: &quot;infos&quot;, label: &quot;Information&quot; },&#10;  { value: &quot;avertissement&quot;, label: &quot;Avertissement&quot; },&#10;];&#10;&#10;const JOURS = [&quot;Lundi&quot;, &quot;Mardi&quot;, &quot;Mercredi&quot;, &quot;Jeudi&quot;, &quot;Vendredi&quot;, &quot;Samedi&quot;, &quot;Dimanche&quot;];&#10;&#10;export default function CreationPerturbationLigne() {&#10;  const [step, setStep] = useState(0);&#10;  const [form, setForm] = useState({&#10;    type: &quot;travaux&quot;,&#10;    ligne_id: &quot;&quot;,&#10;    date_debut: &quot;&quot;,&#10;    date_fin: &quot;&quot;,&#10;    jours: [],&#10;    heure_debut: &quot;&quot;,&#10;    heure_fin: &quot;&quot;,&#10;    titre: &quot;&quot;,&#10;    contenu: &quot;&quot;,&#10;    impact_circulation: false,&#10;    sillons_impactes: [],&#10;    substitutions: false,&#10;    sillons_substitution: [],&#10;  });&#10;  const [saving, setSaving] = useState(false);&#10;  const [lignes, setLignes] = useState([]);&#10;  const [loadingLignes, setLoadingLignes] = useState(true);&#10;  const [errorLignes, setErrorLignes] = useState(&quot;&quot;);&#10;  const [sillons, setSillons] = useState([]);&#10;  const [loadingSillons, setLoadingSillons] = useState(false);&#10;  const [errorSillons, setErrorSillons] = useState(&quot;&quot;);&#10;  const [sillonsSub, setSillonsSub] = useState([]);&#10;  const [loadingSillonsSub, setLoadingSillonsSub] = useState(false);&#10;  const [errorSillonsSub, setErrorSillonsSub] = useState(&quot;&quot;);&#10;  const router = useRouter();&#10;&#10;  useEffect(() =&gt; {&#10;    async function fetchLignes() {&#10;      setLoadingLignes(true);&#10;      setErrorLignes(&quot;&quot;);&#10;      try {&#10;        const res = await fetch(&quot;/api/lignes&quot;, { cache: &quot;no-store&quot; });&#10;        const data = await res.json();&#10;        if (!res.ok) throw new Error(data?.error || &quot;Erreur chargement lignes&quot;);&#10;        setLignes(data.lignes || []);&#10;      } catch (e) {&#10;        setErrorLignes(e.message || &quot;Erreur de chargement&quot;);&#10;      } finally {&#10;        setLoadingLignes(false);&#10;      }&#10;    }&#10;    fetchLignes();&#10;  }, []);&#10;&#10;  useEffect(() =&gt; {&#10;    // Charger les sillons si on est à l'étape Circulation, que l'impact est coché, et que tout est rempli&#10;    if (&#10;      step === 3 &amp;&amp;&#10;      form.type === &quot;travaux&quot; &amp;&amp;&#10;      form.impact_circulation &amp;&amp;&#10;      form.ligne_id &amp;&amp;&#10;      form.date_debut &amp;&amp;&#10;      form.date_fin &amp;&amp;&#10;      form.heure_debut &amp;&amp;&#10;      form.heure_fin&#10;    ) {&#10;      async function fetchSillons() {&#10;        setLoadingSillons(true);&#10;        setErrorSillons(&quot;&quot;);&#10;        try {&#10;          const res = await fetch(`/api/schedules?ligne_id=${form.ligne_id}`);&#10;          const data = await res.json();&#10;          if (!res.ok) throw new Error(data?.error || &quot;Erreur chargement sillons&quot;);&#10;          // Filtrer par heure de début/fin&#10;          const toM = t =&gt; { const [H, M] = String(t || '').split(&quot;:&quot;).map(Number); return (H || 0) * 60 + (M || 0); };&#10;          const sM = toM(form.heure_debut), eM = toM(form.heure_fin);&#10;          const inRange = t =&gt; {&#10;            const m = toM(t);&#10;            return sM &lt;= eM ? (m &gt;= sM &amp;&amp; m &lt;= eM) : (m &gt;= sM || m &lt;= eM);&#10;          };&#10;          const filtered = (Array.isArray(data) ? data : []).filter(s =&gt; inRange(s.departure_time || s.departureTime));&#10;          setSillons(filtered);&#10;        } catch (e) {&#10;          setErrorSillons(e.message || &quot;Erreur de chargement&quot;);&#10;          setSillons([]);&#10;        } finally {&#10;          setLoadingSillons(false);&#10;        }&#10;      }&#10;      fetchSillons();&#10;    }&#10;  }, [step, form.type, form.impact_circulation, form.ligne_id, form.date_debut, form.date_fin, form.heure_debut, form.heure_fin]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (&#10;      step === 4 &amp;&amp;&#10;      form.type === &quot;travaux&quot; &amp;&amp;&#10;      form.substitutions &amp;&amp;&#10;      form.ligne_id &amp;&amp;&#10;      form.date_debut &amp;&amp;&#10;      form.date_fin&#10;    ) {&#10;      async function fetchSillonsSub() {&#10;        setLoadingSillonsSub(true);&#10;        setErrorSillonsSub(&quot;&quot;);&#10;        try {&#10;          const res = await fetch(`/api/schedules?ligne_id=${form.ligne_id}&amp;is_substitution=1`);&#10;          const data = await res.json();&#10;          if (!res.ok) throw new Error(data?.error || &quot;Erreur chargement sillons substitution&quot;);&#10;          setSillonsSub(Array.isArray(data) ? data : []);&#10;        } catch (e) {&#10;          setErrorSillonsSub(e.message || &quot;Erreur de chargement&quot;);&#10;          setSillonsSub([]);&#10;        } finally {&#10;          setLoadingSillonsSub(false);&#10;        }&#10;      }&#10;      fetchSillonsSub();&#10;    }&#10;  }, [step, form.type, form.substitutions, form.ligne_id, form.date_debut, form.date_fin]);&#10;&#10;  const nextStep = () =&gt; setStep(s =&gt; Math.min(ETAPES.length - 1, s + 1));&#10;  const prevStep = () =&gt; setStep(s =&gt; Math.max(0, s - 1));&#10;&#10;  const handleSubmit = async (e) =&gt; {&#10;    e.preventDefault();&#10;    setSaving(true);&#10;    try {&#10;      const payload = {&#10;        type: form.type,&#10;        ligne_id: form.ligne_id,&#10;        titre: form.titre,&#10;        description: form.contenu,&#10;        date_debut: form.date_debut ? `${form.date_debut}T${form.heure_debut || '00:00'}` : null,&#10;        date_fin: form.date_fin ? `${form.date_fin}T${form.heure_fin || '23:59'}` : null,&#10;        data: {&#10;          jours: form.jours,&#10;          horaire_interruption: form.type === 'travaux' ? { debut: form.heure_debut, fin: form.heure_fin } : undefined,&#10;          exclude_schedules: form.type === 'travaux' &amp;&amp; form.impact_circulation ? form.sillons_impactes : undefined,&#10;          substitutions: form.type === 'travaux' &amp;&amp; form.substitutions ? form.sillons_substitution : undefined,&#10;        }&#10;      };&#10;      // Nettoyage des undefined&#10;      Object.keys(payload.data).forEach(k =&gt; payload.data[k] === undefined &amp;&amp; delete payload.data[k]);&#10;      const res = await fetch('/api/perturbations', {&#10;        method: 'POST',&#10;        headers: { 'Content-Type': 'application/json' },&#10;        body: JSON.stringify(payload)&#10;      });&#10;      if (!res.ok) throw new Error((await res.json())?.error || 'Erreur lors de la création');&#10;      setSaving(false);&#10;      router.push(&quot;/espace/admin/perturbations&quot;);&#10;    } catch (e) {&#10;      alert(e.message || 'Erreur lors de la création');&#10;      setSaving(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h1&gt;Créer une perturbation sur une ligne&lt;/h1&gt;&#10;      {/* Stepper React custom, remplace le WCS */}&#10;      &lt;div className=&quot;sncf-stepper mb-4&quot;&gt;&#10;        &lt;ol className=&quot;sncf-stepper-list d-flex flex-row list-unstyled p-0 m-0&quot;&gt;&#10;          {ETAPES.map((etape, idx) =&gt; (&#10;            &lt;li key={etape} className={&#10;              'sncf-stepper-step flex-fill text-center ' +&#10;              (idx &lt; step ? 'completed' : idx === step ? 'active' : 'upcoming')&#10;            }&gt;&#10;              &lt;div className=&quot;sncf-stepper-circle mx-auto mb-1&quot;&gt;&#10;                {idx &lt; step ? &lt;span&gt;&amp;#10003;&lt;/span&gt; : idx + 1}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;sncf-stepper-label small&quot;&gt;{etape}&lt;/div&gt;&#10;            &lt;/li&gt;&#10;          ))}&#10;        &lt;/ol&gt;&#10;      &lt;/div&gt;&#10;      &lt;style jsx&gt;{`&#10;        .sncf-stepper-list { counter-reset: step; }&#10;        .sncf-stepper-step { position: relative; }&#10;        .sncf-stepper-circle {&#10;          width: 2.2em; height: 2.2em; border-radius: 50%;&#10;          background: #e9ecef; color: #6c757d; display: flex; align-items: center; justify-content: center;&#10;          font-weight: bold; font-size: 1.1em; border: 2px solid #e9ecef;&#10;        }&#10;        .sncf-stepper-step.active .sncf-stepper-circle {&#10;          background: #0070f3; color: #fff; border-color: #0070f3;&#10;        }&#10;        .sncf-stepper-step.completed .sncf-stepper-circle {&#10;          background: #43a047; color: #fff; border-color: #43a047;&#10;        }&#10;        .sncf-stepper-step:not(:last-child)::after {&#10;          content: '';&#10;          position: absolute; top: 50%; right: -50%; left: 50%; height: 4px;&#10;          background: #e9ecef; z-index: 0; transform: translateY(-50%);&#10;        }&#10;        .sncf-stepper-step.completed:not(:last-child)::after {&#10;          background: #43a047;&#10;        }&#10;        .sncf-stepper-step.active .sncf-stepper-label {&#10;          color: #0070f3;&#10;        }&#10;        .sncf-stepper-step.completed .sncf-stepper-label {&#10;          color: #43a047;&#10;        }&#10;      `}&lt;/style&gt;&#10;      &lt;div className=&quot;mb-4 d-flex gap-2&quot;&gt;&#10;        &lt;button type=&quot;button&quot; className=&quot;btn btn-outline-secondary&quot; onClick={prevStep} disabled={step === 0}&gt;Previous&lt;/button&gt;&#10;        &lt;button type=&quot;button&quot; className=&quot;btn btn-outline-primary&quot; onClick={nextStep} disabled={((form.type !== &quot;travaux&quot; &amp;&amp; step &gt;= 3) || (form.type === &quot;travaux&quot; &amp;&amp; step &gt;= 5))}&gt;Next&lt;/button&gt;&#10;      &lt;/div&gt;&#10;      &lt;form onSubmit={handleSubmit}&gt;&#10;        {step === 0 &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Général&lt;/h2&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Type de perturbation&lt;/label&gt;&#10;              &lt;select className=&quot;form-select&quot; value={form.type} onChange={e =&gt; setForm(f =&gt; ({ ...f, type: e.target.value }))} required&gt;&#10;                {PERTURB_TYPES.map(t =&gt; &lt;option key={t.value} value={t.value}&gt;{t.label}&lt;/option&gt;)}&#10;              &lt;/select&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Ligne concernée&lt;/label&gt;&#10;              {loadingLignes ? (&#10;                &lt;div&gt;Chargement des lignes…&lt;/div&gt;&#10;              ) : errorLignes ? (&#10;                &lt;div className=&quot;text-danger&quot;&gt;{errorLignes}&lt;/div&gt;&#10;              ) : (&#10;                &lt;select className=&quot;form-select&quot; value={form.ligne_id} onChange={e =&gt; setForm(f =&gt; ({ ...f, ligne_id: e.target.value }))} required&gt;&#10;                  &lt;option value=&quot;&quot;&gt;Choisir…&lt;/option&gt;&#10;                  {lignes.map(l =&gt; (&#10;                    &lt;option key={l.id} value={l.id}&gt;{l.nom || l.name || `Ligne #${l.id}`}&lt;/option&gt;&#10;                  ))}&#10;                &lt;/select&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {step === 1 &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Diffusion&lt;/h2&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Date de début de diffusion&lt;/label&gt;&#10;              &lt;input type=&quot;date&quot; className=&quot;form-control&quot; value={form.date_debut} onChange={e =&gt; setForm(f =&gt; ({ ...f, date_debut: e.target.value }))} required /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Date de fin de diffusion&lt;/label&gt;&#10;              &lt;input type=&quot;date&quot; className=&quot;form-control&quot; value={form.date_fin} onChange={e =&gt; setForm(f =&gt; ({ ...f, date_fin: e.target.value }))} required /&gt;&#10;            &lt;/div&gt;&#10;            {form.type === &quot;travaux&quot; &amp;&amp; (&#10;              &lt;&gt;&#10;                &lt;div className=&quot;mb-3&quot;&gt;&#10;                  &lt;label className=&quot;form-label&quot;&gt;Jours de travaux&lt;/label&gt;&#10;                  &lt;div className=&quot;d-flex flex-wrap gap-2&quot;&gt;&#10;                    {JOURS.map((j, idx) =&gt; (&#10;                      &lt;label key={j} className=&quot;form-check&quot;&gt;&#10;                        &lt;input type=&quot;checkbox&quot; className=&quot;form-check-input&quot; checked={form.jours.includes(idx)} onChange={e =&gt; {&#10;                          setForm(f =&gt; ({&#10;                            ...f,&#10;                            jours: e.target.checked ? [...f.jours, idx] : f.jours.filter(d =&gt; d !== idx)&#10;                          }));&#10;                        }} /&gt;&#10;                        &lt;span className=&quot;form-check-label ms-1&quot;&gt;{j}&lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;mb-3 row&quot;&gt;&#10;                  &lt;div className=&quot;col-md-6&quot;&gt;&#10;                    &lt;label className=&quot;form-label&quot;&gt;Heure de début des travaux&lt;/label&gt;&#10;                    &lt;input type=&quot;time&quot; className=&quot;form-control&quot; value={form.heure_debut} onChange={e =&gt; setForm(f =&gt; ({ ...f, heure_debut: e.target.value }))} required={form.type === &quot;travaux&quot;} /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;col-md-6&quot;&gt;&#10;                    &lt;label className=&quot;form-label&quot;&gt;Heure de fin des travaux&lt;/label&gt;&#10;                    &lt;input type=&quot;time&quot; className=&quot;form-control&quot; value={form.heure_fin} onChange={e =&gt; setForm(f =&gt; ({ ...f, heure_fin: e.target.value }))} required={form.type === &quot;travaux&quot;} /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;        {step === 2 &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Contenu&lt;/h2&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Titre&lt;/label&gt;&#10;              &lt;input&#10;                type=&quot;text&quot;&#10;                className=&quot;form-control&quot;&#10;                value={form.titre}&#10;                onChange={e =&gt; setForm(f =&gt; ({ ...f, titre: e.target.value }))}&#10;                required&#10;              /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Contenu&lt;/label&gt;&#10;              &lt;Editor&#10;                apiKey=&quot;1l7z08kf4ai6ze5gyn4g3ge34a69w9m07arnmj0cvug2ptp8&quot;&#10;                value={form.contenu}&#10;                init={{&#10;                  height: 200,&#10;                  menubar: false,&#10;                  plugins: [&#10;                    'advlist autolink lists link image charmap preview anchor',&#10;                    'searchreplace visualblocks code fullscreen',&#10;                    'insertdatetime media table paste help wordcount'&#10;                  ],&#10;                  toolbar:&#10;                    'undo redo | formatselect | bold italic underline | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | help',&#10;                }}&#10;                onEditorChange={val =&gt; setForm(f =&gt; ({ ...f, contenu: val }))}&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {step === 3 &amp;&amp; form.type === &quot;travaux&quot; &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Circulation&lt;/h2&gt;&#10;            &lt;div className=&quot;form-check mb-3&quot;&gt;&#10;              &lt;input&#10;                type=&quot;checkbox&quot;&#10;                className=&quot;form-check-input&quot;&#10;                id=&quot;impact-circulation&quot;&#10;                checked={form.impact_circulation}&#10;                onChange={e =&gt; setForm(f =&gt; ({ ...f, impact_circulation: e.target.checked, sillons_impactes: [] }))}&#10;              /&gt;&#10;              &lt;label className=&quot;form-check-label ms-1&quot; htmlFor=&quot;impact-circulation&quot;&gt;&#10;                Cette perturbation impacte la circulation sur la ligne&#10;              &lt;/label&gt;&#10;            &lt;/div&gt;&#10;            {form.impact_circulation &amp;&amp; (&#10;              &lt;div&gt;&#10;                {loadingSillons ? (&#10;                  &lt;div&gt;Chargement des sillons…&lt;/div&gt;&#10;                ) : errorSillons ? (&#10;                  &lt;div className=&quot;text-danger&quot;&gt;{errorSillons}&lt;/div&gt;&#10;                ) : sillons.length === 0 ? (&#10;                  &lt;div className=&quot;text-muted&quot;&gt;Aucun sillon trouvé pour la période et la plage horaire sélectionnées.&lt;/div&gt;&#10;                ) : (&#10;                  &lt;div&gt;&#10;                    &lt;div className=&quot;mb-2&quot;&gt;Sélectionnez les sillons qui ne circuleront pas :&lt;/div&gt;&#10;                    &lt;div className=&quot;list-group&quot;&gt;&#10;                      {sillons.map(s =&gt; (&#10;                        &lt;label key={s.id} className=&quot;list-group-item d-flex align-items-center gap-2&quot;&gt;&#10;                          &lt;input&#10;                            type=&quot;checkbox&quot;&#10;                            className=&quot;form-check-input&quot;&#10;                            checked={form.sillons_impactes.includes(s.id)}&#10;                            onChange={e =&gt; setForm(f =&gt; ({&#10;                              ...f,&#10;                              sillons_impactes: e.target.checked&#10;                                ? [...f.sillons_impactes, s.id]&#10;                                : f.sillons_impactes.filter(id =&gt; id !== s.id)&#10;                            }))}&#10;                          /&gt;&#10;                          &lt;span&gt;{s.nom || s.name || `Sillon #${s.id}`} ({s.departure_time || s.departureTime})&lt;/span&gt;&#10;                        &lt;/label&gt;&#10;                      ))}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;        {step === 4 &amp;&amp; form.type === &quot;travaux&quot; &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Substitutions&lt;/h2&gt;&#10;            &lt;div className=&quot;form-check mb-3&quot;&gt;&#10;              &lt;input&#10;                type=&quot;checkbox&quot;&#10;                className=&quot;form-check-input&quot;&#10;                id=&quot;substitutions&quot;&#10;                checked={form.substitutions}&#10;                onChange={e =&gt; setForm(f =&gt; ({ ...f, substitutions: e.target.checked, sillons_substitution: [] }))}&#10;              /&gt;&#10;              &lt;label className=&quot;form-check-label ms-1&quot; htmlFor=&quot;substitutions&quot;&gt;&#10;                Des substitutions sont prévues&#10;              &lt;/label&gt;&#10;            &lt;/div&gt;&#10;            {form.substitutions &amp;&amp; (&#10;              &lt;div&gt;&#10;                {loadingSillonsSub ? (&#10;                  &lt;div&gt;Chargement des sillons de substitution…&lt;/div&gt;&#10;                ) : errorSillonsSub ? (&#10;                  &lt;div className=&quot;text-danger&quot;&gt;{errorSillonsSub}&lt;/div&gt;&#10;                ) : sillonsSub.length === 0 ? (&#10;                  &lt;div className=&quot;text-muted&quot;&gt;Aucun sillon de substitution trouvé pour la période sélectionnée.&lt;/div&gt;&#10;                ) : (&#10;                  &lt;div&gt;&#10;                    &lt;div className=&quot;mb-2&quot;&gt;Sélectionnez les sillons de substitution à activer :&lt;/div&gt;&#10;                    &lt;div className=&quot;list-group&quot;&gt;&#10;                      {sillonsSub.map(s =&gt; (&#10;                        &lt;label key={s.id} className=&quot;list-group-item d-flex align-items-center gap-2&quot;&gt;&#10;                          &lt;input&#10;                            type=&quot;checkbox&quot;&#10;                            className=&quot;form-check-input&quot;&#10;                            checked={form.sillons_substitution.includes(s.id)}&#10;                            onChange={e =&gt; setForm(f =&gt; ({&#10;                              ...f,&#10;                              sillons_substitution: e.target.checked&#10;                                ? [...f.sillons_substitution, s.id]&#10;                                : f.sillons_substitution.filter(id =&gt; id !== s.id)&#10;                            }))}&#10;                          /&gt;&#10;                          &lt;span&gt;{s.nom || s.name || `Sillon #${s.id}`} ({s.departure_time || s.departureTime})&lt;/span&gt;&#10;                        &lt;/label&gt;&#10;                      ))}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;        {((step === 3 &amp;&amp; form.type !== &quot;travaux&quot;) || (step === 5 &amp;&amp; form.type === &quot;travaux&quot;)) &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Récapitulatif&lt;/h2&gt;&#10;            &lt;ul className=&quot;list-group mb-3&quot;&gt;&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Type :&lt;/strong&gt; {PERTURB_TYPES.find(t =&gt; t.value === form.type)?.label}&lt;/li&gt;&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Ligne :&lt;/strong&gt; {lignes.find(l =&gt; String(l.id) === String(form.ligne_id))?.nom || lignes.find(l =&gt; String(l.id) === String(form.ligne_id))?.name || form.ligne_id}&lt;/li&gt;&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Date de début :&lt;/strong&gt; {form.date_debut} {form.heure_debut}&lt;/li&gt;&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Date de fin :&lt;/strong&gt; {form.date_fin} {form.heure_fin}&lt;/li&gt;&#10;              {form.type === 'travaux' &amp;&amp; (&#10;                &lt;&gt;&#10;                  &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Jours de travaux :&lt;/strong&gt; {form.jours.map(j =&gt; JOURS[j]).join(', ')}&lt;/li&gt;&#10;                  &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Impact circulation :&lt;/strong&gt; {form.impact_circulation ? 'Oui' : 'Non'}&lt;/li&gt;&#10;                  {form.impact_circulation &amp;&amp; (&#10;                    &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Sillons non circulants :&lt;/strong&gt; {form.sillons_impactes.length ? form.sillons_impactes.map(id =&gt; {&#10;                      const s = sillons.find(si =&gt; si.id === id); return s ? (s.nom || s.name || `#${s.id}`) : `#${id}`;&#10;                    }).join(', ') : 'Aucun'}&lt;/li&gt;&#10;                  )}&#10;                  &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Substitutions :&lt;/strong&gt; {form.substitutions ? 'Oui' : 'Non'}&lt;/li&gt;&#10;                  {form.substitutions &amp;&amp; (&#10;                    &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Sillons de substitution :&lt;/strong&gt; {form.sillons_substitution.length ? form.sillons_substitution.map(id =&gt; {&#10;                      const s = sillonsSub.find(si =&gt; si.id === id); return s ? (s.nom || s.name || `#${s.id}`) : `#${id}`;&#10;                    }).join(', ') : 'Aucun'}&lt;/li&gt;&#10;                  )}&#10;                &lt;/&gt;&#10;              )}&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Titre :&lt;/strong&gt; {form.titre}&lt;/li&gt;&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Contenu :&lt;/strong&gt; &lt;span dangerouslySetInnerHTML={{__html: form.contenu}} /&gt;&lt;/li&gt;&#10;            &lt;/ul&gt;&#10;            &lt;button type=&quot;submit&quot; className=&quot;btn btn-success&quot; disabled={saving}&gt;{saving ? &quot;Création…&quot; : &quot;Créer la perturbation&quot;}&lt;/button&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        &lt;div className=&quot;d-flex justify-content-between mt-4&quot;&gt;&#10;          &lt;button type=&quot;button&quot; className=&quot;btn btn-outline-secondary&quot; onClick={prevStep} disabled={step === 0}&gt;Précédent&lt;/button&gt;&#10;          {((form.type !== &quot;travaux&quot; &amp;&amp; step &lt; 3) || (form.type === &quot;travaux&quot; &amp;&amp; step &lt; 5)) &amp;&amp; (&#10;            &lt;button&#10;              type=&quot;button&quot;&#10;              className=&quot;btn btn-primary&quot;&#10;              onClick={nextStep}&#10;              disabled={&#10;                (step === 0 &amp;&amp; (!form.type || !form.ligne_id)) ||&#10;                (step === 1 &amp;&amp; (&#10;                  !form.date_debut ||&#10;                  !form.date_fin ||&#10;                  (form.type === &quot;travaux&quot; &amp;&amp; (&#10;                    form.jours.length === 0 ||&#10;                    !form.heure_debut ||&#10;                    !form.heure_fin&#10;                  ))&#10;                )) ||&#10;                (step === 2 &amp;&amp; (!form.titre.trim() || !form.contenu || form.contenu === '&lt;p&gt;&lt;br&gt;&lt;/p&gt;')) ||&#10;                (step === 3 &amp;&amp; form.type === &quot;travaux&quot; &amp;&amp; form.impact_circulation &amp;&amp; sillons.length &gt; 0 &amp;&amp; form.sillons_impactes.length === 0) ||&#10;                (step === 4 &amp;&amp; form.type === &quot;travaux&quot; &amp;&amp; form.substitutions &amp;&amp; sillonsSub.length &gt; 0 &amp;&amp; form.sillons_substitution.length === 0)&#10;              }&#10;            &gt;&#10;              Suivant&#10;            &lt;/button&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import React, { useState, useEffect } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { Editor } from '@tinymce/tinymce-react';&#10;&#10;const ETAPES = [&#10;  &quot;Général&quot;,&#10;  &quot;Diffusion&quot;,&#10;  &quot;Contenu&quot;,&#10;  &quot;Circulation&quot;,&#10;  &quot;Substitutions&quot;,&#10;  &quot;Récapitulatif&quot;&#10;];&#10;&#10;const PERTURB_TYPES = [&#10;  { value: &quot;travaux&quot;, label: &quot;Travaux&quot; },&#10;  { value: &quot;infos&quot;, label: &quot;Information&quot; },&#10;  { value: &quot;avertissement&quot;, label: &quot;Avertissement&quot; },&#10;];&#10;&#10;const JOURS = [&quot;Lundi&quot;, &quot;Mardi&quot;, &quot;Mercredi&quot;, &quot;Jeudi&quot;, &quot;Vendredi&quot;, &quot;Samedi&quot;, &quot;Dimanche&quot;];&#10;&#10;export default function CreationPerturbationLigne() {&#10;  const [step, setStep] = useState(0);&#10;  const [form, setForm] = useState({&#10;    type: &quot;travaux&quot;,&#10;    ligne_id: &quot;&quot;,&#10;    date_debut: &quot;&quot;,&#10;    date_fin: &quot;&quot;,&#10;    jours: [],&#10;    heure_debut: &quot;&quot;,&#10;    heure_fin: &quot;&quot;,&#10;    titre: &quot;&quot;,&#10;    contenu: &quot;&quot;,&#10;    impact_circulation: false,&#10;    sillons_impactes: [],&#10;    substitutions: false,&#10;    sillons_substitution: [],&#10;  });&#10;  const [saving, setSaving] = useState(false);&#10;  const [lignes, setLignes] = useState([]);&#10;  const [loadingLignes, setLoadingLignes] = useState(true);&#10;  const [errorLignes, setErrorLignes] = useState(&quot;&quot;);&#10;  const [sillons, setSillons] = useState([]);&#10;  const [loadingSillons, setLoadingSillons] = useState(false);&#10;  const [errorSillons, setErrorSillons] = useState(&quot;&quot;);&#10;  const [sillonsSub, setSillonsSub] = useState([]);&#10;  const [loadingSillonsSub, setLoadingSillonsSub] = useState(false);&#10;  const [errorSillonsSub, setErrorSillonsSub] = useState(&quot;&quot;);&#10;  const router = useRouter();&#10;&#10;  useEffect(() =&gt; {&#10;    async function fetchLignes() {&#10;      setLoadingLignes(true);&#10;      setErrorLignes(&quot;&quot;);&#10;      try {&#10;        const res = await fetch(&quot;/api/lignes&quot;, { cache: &quot;no-store&quot; });&#10;        const data = await res.json();&#10;        if (!res.ok) throw new Error(data?.error || &quot;Erreur chargement lignes&quot;);&#10;        setLignes(data.lignes || []);&#10;      } catch (e) {&#10;        setErrorLignes(e.message || &quot;Erreur de chargement&quot;);&#10;      } finally {&#10;        setLoadingLignes(false);&#10;      }&#10;    }&#10;    fetchLignes();&#10;  }, []);&#10;&#10;  useEffect(() =&gt; {&#10;    // Charger les sillons si on est à l'étape Circulation, que l'impact est coché, et que tout est rempli&#10;    if (&#10;      step === 3 &amp;&amp;&#10;      form.type === &quot;travaux&quot; &amp;&amp;&#10;      form.impact_circulation &amp;&amp;&#10;      form.ligne_id &amp;&amp;&#10;      form.date_debut &amp;&amp;&#10;      form.date_fin &amp;&amp;&#10;      form.heure_debut &amp;&amp;&#10;      form.heure_fin&#10;    ) {&#10;      async function fetchSillons() {&#10;        setLoadingSillons(true);&#10;        setErrorSillons(&quot;&quot;);&#10;        try {&#10;          const res = await fetch(`/api/schedules?ligne_id=${form.ligne_id}`);&#10;          const data = await res.json();&#10;          if (!res.ok) throw new Error(data?.error || &quot;Erreur chargement sillons&quot;);&#10;          // Filtrer par heure de début/fin&#10;          const toM = t =&gt; { const [H, M] = String(t || '').split(&quot;:&quot;).map(Number); return (H || 0) * 60 + (M || 0); };&#10;          const sM = toM(form.heure_debut), eM = toM(form.heure_fin);&#10;          const inRange = t =&gt; {&#10;            const m = toM(t);&#10;            return sM &lt;= eM ? (m &gt;= sM &amp;&amp; m &lt;= eM) : (m &gt;= sM || m &lt;= eM);&#10;          };&#10;          const filtered = (Array.isArray(data) ? data : []).filter(s =&gt; inRange(s.departure_time || s.departureTime));&#10;          setSillons(filtered);&#10;        } catch (e) {&#10;          setErrorSillons(e.message || &quot;Erreur de chargement&quot;);&#10;          setSillons([]);&#10;        } finally {&#10;          setLoadingSillons(false);&#10;        }&#10;      }&#10;      fetchSillons();&#10;    }&#10;  }, [step, form.type, form.impact_circulation, form.ligne_id, form.date_debut, form.date_fin, form.heure_debut, form.heure_fin]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (&#10;      step === 4 &amp;&amp;&#10;      form.type === &quot;travaux&quot; &amp;&amp;&#10;      form.substitutions &amp;&amp;&#10;      form.ligne_id &amp;&amp;&#10;      form.date_debut &amp;&amp;&#10;      form.date_fin&#10;    ) {&#10;      async function fetchSillonsSub() {&#10;        setLoadingSillonsSub(true);&#10;        setErrorSillonsSub(&quot;&quot;);&#10;        try {&#10;          const res = await fetch(`/api/schedules?ligne_id=${form.ligne_id}&amp;is_substitution=1`);&#10;          const data = await res.json();&#10;          if (!res.ok) throw new Error(data?.error || &quot;Erreur chargement sillons substitution&quot;);&#10;          setSillonsSub(Array.isArray(data) ? data : []);&#10;        } catch (e) {&#10;          setErrorSillonsSub(e.message || &quot;Erreur de chargement&quot;);&#10;          setSillonsSub([]);&#10;        } finally {&#10;          setLoadingSillonsSub(false);&#10;        }&#10;      }&#10;      fetchSillonsSub();&#10;    }&#10;  }, [step, form.type, form.substitutions, form.ligne_id, form.date_debut, form.date_fin]);&#10;&#10;  const nextStep = () =&gt; setStep(s =&gt; Math.min(ETAPES.length - 1, s + 1));&#10;  const prevStep = () =&gt; setStep(s =&gt; Math.max(0, s - 1));&#10;&#10;  const handleSubmit = async (e) =&gt; {&#10;    e.preventDefault();&#10;    setSaving(true);&#10;    try {&#10;      const payload = {&#10;        type: form.type,&#10;        ligne_id: form.ligne_id,&#10;        titre: form.titre,&#10;        description: form.contenu,&#10;        date_debut: form.date_debut ? `${form.date_debut}T${form.heure_debut || '00:00'}` : null,&#10;        date_fin: form.date_fin ? `${form.date_fin}T${form.heure_fin || '23:59'}` : null,&#10;        data: {&#10;          jours: form.jours,&#10;          horaire_interruption: form.type === 'travaux' ? { debut: form.heure_debut, fin: form.heure_fin } : undefined,&#10;          exclude_schedules: form.type === 'travaux' &amp;&amp; form.impact_circulation ? form.sillons_impactes : undefined,&#10;          substitutions: form.type === 'travaux' &amp;&amp; form.substitutions ? form.sillons_substitution : undefined,&#10;        }&#10;      };&#10;      // Nettoyage des undefined&#10;      Object.keys(payload.data).forEach(k =&gt; payload.data[k] === undefined &amp;&amp; delete payload.data[k]);&#10;      const res = await fetch('/api/perturbations', {&#10;        method: 'POST',&#10;        headers: { 'Content-Type': 'application/json' },&#10;        body: JSON.stringify(payload)&#10;      });&#10;      if (!res.ok) throw new Error((await res.json())?.error || 'Erreur lors de la création');&#10;      setSaving(false);&#10;      router.push(&quot;/espace/admin/perturbations&quot;);&#10;    } catch (e) {&#10;      alert(e.message || 'Erreur lors de la création');&#10;      setSaving(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h1&gt;Créer une perturbation sur une ligne&lt;/h1&gt;&#10;      {/* Stepper React custom, remplace le WCS */}&#10;      &lt;div className=&quot;sncf-stepper mb-4&quot;&gt;&#10;        &lt;ol className=&quot;sncf-stepper-list d-flex flex-row list-unstyled p-0 m-0&quot;&gt;&#10;          {ETAPES.map((etape, idx) =&gt; (&#10;            &lt;li key={etape} className={&#10;              'sncf-stepper-step flex-fill text-center ' +&#10;              (idx &lt; step ? 'completed' : idx === step ? 'active' : 'upcoming')&#10;            }&gt;&#10;              &lt;div className=&quot;sncf-stepper-circle mx-auto mb-1&quot;&gt;&#10;                {idx &lt; step ? &lt;span&gt;&amp;#10003;&lt;/span&gt; : idx + 1}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;sncf-stepper-label small&quot;&gt;{etape}&lt;/div&gt;&#10;            &lt;/li&gt;&#10;          ))}&#10;        &lt;/ol&gt;&#10;      &lt;/div&gt;&#10;      &lt;style jsx&gt;{`&#10;        .sncf-stepper-list { counter-reset: step; }&#10;        .sncf-stepper-step { position: relative; }&#10;        .sncf-stepper-circle {&#10;          width: 2.2em; height: 2.2em; border-radius: 50%;&#10;          background: #e9ecef; color: #6c757d; display: flex; align-items: center; justify-content: center;&#10;          font-weight: bold; font-size: 1.1em; border: 2px solid #e9ecef;&#10;        }&#10;        .sncf-stepper-step.active .sncf-stepper-circle {&#10;          background: #0070f3; color: #fff; border-color: #0070f3;&#10;        }&#10;        .sncf-stepper-step.completed .sncf-stepper-circle {&#10;          background: #43a047; color: #fff; border-color: #43a047;&#10;        }&#10;        .sncf-stepper-step:not(:last-child)::after {&#10;          content: '';&#10;          position: absolute; top: 50%; right: -50%; left: 50%; height: 4px;&#10;          background: #e9ecef; z-index: 0; transform: translateY(-50%);&#10;        }&#10;        .sncf-stepper-step.completed:not(:last-child)::after {&#10;          background: #43a047;&#10;        }&#10;        .sncf-stepper-step.active .sncf-stepper-label {&#10;          color: #0070f3;&#10;        }&#10;        .sncf-stepper-step.completed .sncf-stepper-label {&#10;          color: #43a047;&#10;        }&#10;      `}&lt;/style&gt;&#10;      &lt;div className=&quot;mb-4 d-flex gap-2&quot;&gt;&#10;        &lt;button type=&quot;button&quot; className=&quot;btn btn-outline-secondary&quot; onClick={prevStep} disabled={step === 0}&gt;Previous&lt;/button&gt;&#10;        &lt;button type=&quot;button&quot; className=&quot;btn btn-outline-primary&quot; onClick={nextStep} disabled={((form.type !== &quot;travaux&quot; &amp;&amp; step &gt;= 3) || (form.type === &quot;travaux&quot; &amp;&amp; step &gt;= 5))}&gt;Next&lt;/button&gt;&#10;      &lt;/div&gt;&#10;      &lt;form onSubmit={handleSubmit}&gt;&#10;        {step === 0 &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Général&lt;/h2&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Type de perturbation&lt;/label&gt;&#10;              &lt;select className=&quot;form-select&quot; value={form.type} onChange={e =&gt; setForm(f =&gt; ({ ...f, type: e.target.value }))} required&gt;&#10;                {PERTURB_TYPES.map(t =&gt; &lt;option key={t.value} value={t.value}&gt;{t.label}&lt;/option&gt;)}&#10;              &lt;/select&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Ligne concernée&lt;/label&gt;&#10;              {loadingLignes ? (&#10;                &lt;div&gt;Chargement des lignes…&lt;/div&gt;&#10;              ) : errorLignes ? (&#10;                &lt;div className=&quot;text-danger&quot;&gt;{errorLignes}&lt;/div&gt;&#10;              ) : (&#10;                &lt;select className=&quot;form-select&quot; value={form.ligne_id} onChange={e =&gt; setForm(f =&gt; ({ ...f, ligne_id: e.target.value }))} required&gt;&#10;                  &lt;option value=&quot;&quot;&gt;Choisir…&lt;/option&gt;&#10;                  {lignes.map(l =&gt; (&#10;                    &lt;option key={l.id} value={l.id}&gt;{`${l.depart_name || 'Inconnue'} &lt;&gt; ${l.arrivee_name || 'Inconnue'}`}&lt;/option&gt;&#10;                  ))}&#10;                &lt;/select&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {step === 1 &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Diffusion&lt;/h2&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Date de début de diffusion&lt;/label&gt;&#10;              &lt;input type=&quot;date&quot; className=&quot;form-control&quot; value={form.date_debut} onChange={e =&gt; setForm(f =&gt; ({ ...f, date_debut: e.target.value }))} required /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Date de fin de diffusion&lt;/label&gt;&#10;              &lt;input type=&quot;date&quot; className=&quot;form-control&quot; value={form.date_fin} onChange={e =&gt; setForm(f =&gt; ({ ...f, date_fin: e.target.value }))} required /&gt;&#10;            &lt;/div&gt;&#10;            {form.type === &quot;travaux&quot; &amp;&amp; (&#10;              &lt;&gt;&#10;                &lt;div className=&quot;mb-3&quot;&gt;&#10;                  &lt;label className=&quot;form-label&quot;&gt;Jours de travaux&lt;/label&gt;&#10;                  &lt;div className=&quot;d-flex flex-wrap gap-2&quot;&gt;&#10;                    {JOURS.map((j, idx) =&gt; (&#10;                      &lt;label key={j} className=&quot;form-check&quot;&gt;&#10;                        &lt;input type=&quot;checkbox&quot; className=&quot;form-check-input&quot; checked={form.jours.includes(idx)} onChange={e =&gt; {&#10;                          setForm(f =&gt; ({&#10;                            ...f,&#10;                            jours: e.target.checked ? [...f.jours, idx] : f.jours.filter(d =&gt; d !== idx)&#10;                          }));&#10;                        }} /&gt;&#10;                        &lt;span className=&quot;form-check-label ms-1&quot;&gt;{j}&lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;mb-3 row&quot;&gt;&#10;                  &lt;div className=&quot;col-md-6&quot;&gt;&#10;                    &lt;label className=&quot;form-label&quot;&gt;Heure de début des travaux&lt;/label&gt;&#10;                    &lt;input type=&quot;time&quot; className=&quot;form-control&quot; value={form.heure_debut} onChange={e =&gt; setForm(f =&gt; ({ ...f, heure_debut: e.target.value }))} required={form.type === &quot;travaux&quot;} /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;col-md-6&quot;&gt;&#10;                    &lt;label className=&quot;form-label&quot;&gt;Heure de fin des travaux&lt;/label&gt;&#10;                    &lt;input type=&quot;time&quot; className=&quot;form-control&quot; value={form.heure_fin} onChange={e =&gt; setForm(f =&gt; ({ ...f, heure_fin: e.target.value }))} required={form.type === &quot;travaux&quot;} /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;        {step === 2 &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Contenu&lt;/h2&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Titre&lt;/label&gt;&#10;              &lt;input&#10;                type=&quot;text&quot;&#10;                className=&quot;form-control&quot;&#10;                value={form.titre}&#10;                onChange={e =&gt; setForm(f =&gt; ({ ...f, titre: e.target.value }))}&#10;                required&#10;              /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Contenu&lt;/label&gt;&#10;              &lt;Editor&#10;                apiKey=&quot;1l7z08kf4ai6ze5gyn4g3ge34a69w9m07arnmj0cvug2ptp8&quot;&#10;                value={form.contenu}&#10;                init={{&#10;                  height: 200,&#10;                  menubar: false,&#10;                  plugins: [&#10;                    'advlist autolink lists link image charmap preview anchor',&#10;                    'searchreplace visualblocks code fullscreen',&#10;                    'insertdatetime media table paste help wordcount'&#10;                  ],&#10;                  toolbar:&#10;                    'undo redo | formatselect | bold italic underline | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | help',&#10;                }}&#10;                onEditorChange={val =&gt; setForm(f =&gt; ({ ...f, contenu: val }))}&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {step === 3 &amp;&amp; form.type === &quot;travaux&quot; &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Circulation&lt;/h2&gt;&#10;            &lt;div className=&quot;form-check mb-3&quot;&gt;&#10;              &lt;input&#10;                type=&quot;checkbox&quot;&#10;                className=&quot;form-check-input&quot;&#10;                id=&quot;impact-circulation&quot;&#10;                checked={form.impact_circulation}&#10;                onChange={e =&gt; setForm(f =&gt; ({ ...f, impact_circulation: e.target.checked, sillons_impactes: [] }))}&#10;              /&gt;&#10;              &lt;label className=&quot;form-check-label ms-1&quot; htmlFor=&quot;impact-circulation&quot;&gt;&#10;                Cette perturbation impacte la circulation sur la ligne&#10;              &lt;/label&gt;&#10;            &lt;/div&gt;&#10;            {form.impact_circulation &amp;&amp; (&#10;              &lt;div&gt;&#10;                {loadingSillons ? (&#10;                  &lt;div&gt;Chargement des sillons…&lt;/div&gt;&#10;                ) : errorSillons ? (&#10;                  &lt;div className=&quot;text-danger&quot;&gt;{errorSillons}&lt;/div&gt;&#10;                ) : sillons.length === 0 ? (&#10;                  &lt;div className=&quot;text-muted&quot;&gt;Aucun sillon trouvé pour la période et la plage horaire sélectionnées.&lt;/div&gt;&#10;                ) : (&#10;                  &lt;div&gt;&#10;                    &lt;div className=&quot;mb-2&quot;&gt;Sélectionnez les sillons qui ne circuleront pas :&lt;/div&gt;&#10;                    &lt;div className=&quot;list-group&quot;&gt;&#10;                      {sillons.map(s =&gt; (&#10;                        &lt;label key={s.id} className=&quot;list-group-item d-flex align-items-center gap-2&quot;&gt;&#10;                          &lt;input&#10;                            type=&quot;checkbox&quot;&#10;                            className=&quot;form-check-input&quot;&#10;                            checked={form.sillons_impactes.includes(s.id)}&#10;                            onChange={e =&gt; setForm(f =&gt; ({&#10;                              ...f,&#10;                              sillons_impactes: e.target.checked&#10;                                ? [...f.sillons_impactes, s.id]&#10;                                : f.sillons_impactes.filter(id =&gt; id !== s.id)&#10;                            }))}&#10;                          /&gt;&#10;                          &lt;span&gt;{s.nom || s.name || `Sillon #${s.id}`} ({s.departure_time || s.departureTime})&lt;/span&gt;&#10;                        &lt;/label&gt;&#10;                      ))}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;        {step === 4 &amp;&amp; form.type === &quot;travaux&quot; &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Substitutions&lt;/h2&gt;&#10;            &lt;div className=&quot;form-check mb-3&quot;&gt;&#10;              &lt;input&#10;                type=&quot;checkbox&quot;&#10;                className=&quot;form-check-input&quot;&#10;                id=&quot;substitutions&quot;&#10;                checked={form.substitutions}&#10;                onChange={e =&gt; setForm(f =&gt; ({ ...f, substitutions: e.target.checked, sillons_substitution: [] }))}&#10;              /&gt;&#10;              &lt;label className=&quot;form-check-label ms-1&quot; htmlFor=&quot;substitutions&quot;&gt;&#10;                Des substitutions sont prévues&#10;              &lt;/label&gt;&#10;            &lt;/div&gt;&#10;            {form.substitutions &amp;&amp; (&#10;              &lt;div&gt;&#10;                {loadingSillonsSub ? (&#10;                  &lt;div&gt;Chargement des sillons de substitution…&lt;/div&gt;&#10;                ) : errorSillonsSub ? (&#10;                  &lt;div className=&quot;text-danger&quot;&gt;{errorSillonsSub}&lt;/div&gt;&#10;                ) : sillonsSub.length === 0 ? (&#10;                  &lt;div className=&quot;text-muted&quot;&gt;Aucun sillon de substitution trouvé pour la période sélectionnée.&lt;/div&gt;&#10;                ) : (&#10;                  &lt;div&gt;&#10;                    &lt;div className=&quot;mb-2&quot;&gt;Sélectionnez les sillons de substitution à activer :&lt;/div&gt;&#10;                    &lt;div className=&quot;list-group&quot;&gt;&#10;                      {sillonsSub.map(s =&gt; (&#10;                        &lt;label key={s.id} className=&quot;list-group-item d-flex align-items-center gap-2&quot;&gt;&#10;                          &lt;input&#10;                            type=&quot;checkbox&quot;&#10;                            className=&quot;form-check-input&quot;&#10;                            checked={form.sillons_substitution.includes(s.id)}&#10;                            onChange={e =&gt; setForm(f =&gt; ({&#10;                              ...f,&#10;                              sillons_substitution: e.target.checked&#10;                                ? [...f.sillons_substitution, s.id]&#10;                                : f.sillons_substitution.filter(id =&gt; id !== s.id)&#10;                            }))}&#10;                          /&gt;&#10;                          &lt;span&gt;{s.nom || s.name || `Sillon #${s.id}`} ({s.departure_time || s.departureTime})&lt;/span&gt;&#10;                        &lt;/label&gt;&#10;                      ))}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;        {((step === 3 &amp;&amp; form.type !== &quot;travaux&quot;) || (step === 5 &amp;&amp; form.type === &quot;travaux&quot;)) &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Récapitulatif&lt;/h2&gt;&#10;            &lt;ul className=&quot;list-group mb-3&quot;&gt;&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Type :&lt;/strong&gt; {PERTURB_TYPES.find(t =&gt; t.value === form.type)?.label}&lt;/li&gt;&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Ligne :&lt;/strong&gt; {(() =&gt; { const L = lignes.find(l =&gt; String(l.id) === String(form.ligne_id)); return L ? `${L.depart_name || 'Inconnue'} &lt;&gt; ${L.arrivee_name || 'Inconnue'}` : form.ligne_id; })()}&lt;/li&gt;&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Date de début :&lt;/strong&gt; {form.date_debut} {form.heure_debut}&lt;/li&gt;&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Date de fin :&lt;/strong&gt; {form.date_fin} {form.heure_fin}&lt;/li&gt;&#10;              {form.type === 'travaux' &amp;&amp; (&#10;                &lt;&gt;&#10;                  &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Jours de travaux :&lt;/strong&gt; {form.jours.map(j =&gt; JOURS[j]).join(', ')}&lt;/li&gt;&#10;                  &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Impact circulation :&lt;/strong&gt; {form.impact_circulation ? 'Oui' : 'Non'}&lt;/li&gt;&#10;                  {form.impact_circulation &amp;&amp; (&#10;                    &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Sillons non circulants :&lt;/strong&gt; {form.sillons_impactes.length ? form.sillons_impactes.map(id =&gt; {&#10;                      const s = sillons.find(si =&gt; si.id === id); return s ? (s.nom || s.name || `#${s.id}`) : `#${id}`;&#10;                    }).join(', ') : 'Aucun'}&lt;/li&gt;&#10;                  )}&#10;                  &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Substitutions :&lt;/strong&gt; {form.substitutions ? 'Oui' : 'Non'}&lt;/li&gt;&#10;                  {form.substitutions &amp;&amp; (&#10;                    &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Sillons de substitution :&lt;/strong&gt; {form.sillons_substitution.length ? form.sillons_substitution.map(id =&gt; {&#10;                      const s = sillonsSub.find(si =&gt; si.id === id); return s ? (s.nom || s.name || `#${s.id}`) : `#${id}`;&#10;                    }).join(', ') : 'Aucun'}&lt;/li&gt;&#10;                  )}&#10;                &lt;/&gt;&#10;              )}&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Titre :&lt;/strong&gt; {form.titre}&lt;/li&gt;&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Contenu :&lt;/strong&gt; &lt;span dangerouslySetInnerHTML={{__html: form.contenu}} /&gt;&lt;/li&gt;&#10;            &lt;/ul&gt;&#10;            &lt;button type=&quot;submit&quot; className=&quot;btn btn-success&quot; disabled={saving}&gt;{saving ? &quot;Création…&quot; : &quot;Créer la perturbation&quot;}&lt;/button&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        &lt;div className=&quot;d-flex justify-content-between mt-4&quot;&gt;&#10;          &lt;button type=&quot;button&quot; className=&quot;btn btn-outline-secondary&quot; onClick={prevStep} disabled={step === 0}&gt;Précédent&lt;/button&gt;&#10;          {((form.type !== &quot;travaux&quot; &amp;&amp; step &lt; 3) || (form.type === &quot;travaux&quot; &amp;&amp; step &lt; 5)) &amp;&amp; (&#10;            &lt;button&#10;              type=&quot;button&quot;&#10;              className=&quot;btn btn-primary&quot;&#10;              onClick={nextStep}&#10;              disabled={&#10;                (step === 0 &amp;&amp; (!form.type || !form.ligne_id)) ||&#10;                (step === 1 &amp;&amp; (&#10;                  !form.date_debut ||&#10;                  !form.date_fin ||&#10;                  (form.type === &quot;travaux&quot; &amp;&amp; (&#10;                    form.jours.length === 0 ||&#10;                    !form.heure_debut ||&#10;                    !form.heure_fin&#10;                  ))&#10;                )) ||&#10;                (step === 2 &amp;&amp; (!form.titre.trim() || !form.contenu || form.contenu === '&lt;p&gt;&lt;br&gt;&lt;/p&gt;')) ||&#10;                (step === 3 &amp;&amp; form.type === &quot;travaux&quot; &amp;&amp; form.impact_circulation &amp;&amp; sillons.length &gt; 0 &amp;&amp; form.sillons_impactes.length === 0) ||&#10;                (step === 4 &amp;&amp; form.type === &quot;travaux&quot; &amp;&amp; form.substitutions &amp;&amp; sillonsSub.length &gt; 0 &amp;&amp; form.sillons_substitution.length === 0)&#10;              }&#10;            &gt;&#10;              Suivant&#10;            &lt;/button&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/espace/admin/perturbations/lignes/edition/[id]/page.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/espace/admin/perturbations/lignes/edition/[id]/page.jsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import React, { useState, useEffect, useCallback } from &quot;react&quot;;&#10;import { useRouter, useParams } from &quot;next/navigation&quot;;&#10;import { Editor } from '@tinymce/tinymce-react';&#10;&#10;const ETAPES = [&#10;  &quot;Général&quot;,&#10;  &quot;Diffusion&quot;,&#10;  &quot;Contenu&quot;,&#10;  &quot;Circulation&quot;,&#10;  &quot;Substitutions&quot;,&#10;  &quot;Récapitulatif&quot;&#10;];&#10;&#10;const PERTURB_TYPES = [&#10;  { value: &quot;travaux&quot;, label: &quot;Travaux&quot; },&#10;  { value: &quot;infos&quot;, label: &quot;Information&quot; },&#10;  { value: &quot;avertissement&quot;, label: &quot;Avertissement&quot; },&#10;];&#10;&#10;const JOURS = [&quot;Lundi&quot;, &quot;Mardi&quot;, &quot;Mercredi&quot;, &quot;Jeudi&quot;, &quot;Vendredi&quot;, &quot;Samedi&quot;, &quot;Dimanche&quot;];&#10;&#10;export default function EditionPerturbationLigne() {&#10;  const router = useRouter();&#10;  const params = useParams();&#10;  const id = params?.id;&#10;&#10;  const [loaded, setLoaded] = useState(false);&#10;  const [loading, setLoading] = useState(true);&#10;  const [loadError, setLoadError] = useState(&quot;&quot;);&#10;  const [saving, setSaving] = useState(false);&#10;&#10;  const [step, setStep] = useState(0);&#10;  const [form, setForm] = useState({&#10;    type: &quot;travaux&quot;,&#10;    ligne_id: &quot;&quot;,&#10;    date_debut: &quot;&quot;,&#10;    date_fin: &quot;&quot;,&#10;    jours: [],&#10;    heure_debut: &quot;&quot;,&#10;    heure_fin: &quot;&quot;,&#10;    titre: &quot;&quot;,&#10;    contenu: &quot;&quot;,&#10;    impact_circulation: false,&#10;    sillons_impactes: [],&#10;    substitutions: false,&#10;    sillons_substitution: [],&#10;  });&#10;&#10;  const [lignes, setLignes] = useState([]);&#10;  const [loadingLignes, setLoadingLignes] = useState(true);&#10;  const [errorLignes, setErrorLignes] = useState(&quot;&quot;);&#10;&#10;  const [sillons, setSillons] = useState([]);&#10;  const [loadingSillons, setLoadingSillons] = useState(false);&#10;  const [errorSillons, setErrorSillons] = useState(&quot;&quot;);&#10;&#10;  const [sillonsSub, setSillonsSub] = useState([]);&#10;  const [loadingSillonsSub, setLoadingSillonsSub] = useState(false);&#10;  const [errorSillonsSub, setErrorSillonsSub] = useState(&quot;&quot;);&#10;&#10;  const parseDate = useCallback((dt, mode) =&gt; {&#10;    if (!dt) return &quot;&quot;;&#10;    // dt peut être 'YYYY-MM-DD HH:MM:SS' ou ISO&#10;    const parts = dt.includes('T') ? dt.split('T') : dt.split(' ');&#10;    if (mode === 'date') return parts[0];&#10;    if (mode === 'time') {&#10;      const time = parts[1] || '';&#10;      return time.slice(0,5); // HH:MM&#10;    }&#10;    return dt;&#10;  }, []);&#10;&#10;  // Charger lignes&#10;  useEffect(() =&gt; {&#10;    async function fetchLignes() {&#10;      setLoadingLignes(true);&#10;      setErrorLignes(&quot;&quot;);&#10;      try {&#10;        const res = await fetch('/api/lignes', { cache: 'no-store' });&#10;        const data = await res.json();&#10;        if (!res.ok) throw new Error(data?.error || 'Erreur chargement lignes');&#10;        setLignes(data.lignes || []);&#10;      } catch (e) {&#10;        setErrorLignes(e.message || 'Erreur de chargement');&#10;      } finally {&#10;        setLoadingLignes(false);&#10;      }&#10;    }&#10;    fetchLignes();&#10;  }, []);&#10;&#10;  // Charger la perturbation&#10;  useEffect(() =&gt; {&#10;    if (!id) return;&#10;    async function fetchPerturbation() {&#10;      setLoading(true);&#10;      setLoadError(&quot;&quot;);&#10;      try {&#10;        const res = await fetch(`/api/perturbations/${id}`, { cache: 'no-store' });&#10;        const data = await res.json();&#10;        if (!res.ok) throw new Error(data?.error || 'Erreur chargement perturbation');&#10;        const p = data.perturbation || {};&#10;        let parsedData = {};&#10;        try { parsedData = p.data ? (typeof p.data === 'string' ? JSON.parse(p.data) : p.data) : {}; } catch { parsedData = {}; }&#10;&#10;        const isTravaux = p.type === 'travaux';&#10;        const horaire = parsedData.horaire_interruption || {};&#10;&#10;        setForm(f =&gt; ({&#10;          ...f,&#10;            type: p.type || 'travaux',&#10;            ligne_id: String(p.ligne_id || ''),&#10;            date_debut: parseDate(p.date_debut, 'date'),&#10;            date_fin: parseDate(p.date_fin, 'date'),&#10;            heure_debut: isTravaux ? (horaire.debut || parseDate(p.date_debut, 'time') || '') : '',&#10;            heure_fin: isTravaux ? (horaire.fin || parseDate(p.date_fin, 'time') || '') : '',&#10;            jours: Array.isArray(parsedData.jours) ? parsedData.jours : [],&#10;            titre: p.titre || '',&#10;            contenu: p.description || '',&#10;            impact_circulation: !!parsedData.exclude_schedules,&#10;            sillons_impactes: Array.isArray(parsedData.exclude_schedules) ? parsedData.exclude_schedules : [],&#10;            substitutions: !!parsedData.substitutions,&#10;            sillons_substitution: Array.isArray(parsedData.substitutions) ? parsedData.substitutions : [],&#10;        }));&#10;        setLoaded(true);&#10;      } catch (e) {&#10;        setLoadError(e.message || 'Erreur de chargement');&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    }&#10;    fetchPerturbation();&#10;  }, [id, parseDate]);&#10;&#10;  // Recharger sillons (impact circulation) quand conditions remplies (étape 3)&#10;  useEffect(() =&gt; {&#10;    if (&#10;      step === 3 &amp;&amp;&#10;      form.type === 'travaux' &amp;&amp;&#10;      form.impact_circulation &amp;&amp;&#10;      form.ligne_id &amp;&amp;&#10;      form.date_debut &amp;&amp;&#10;      form.date_fin &amp;&amp;&#10;      form.heure_debut &amp;&amp;&#10;      form.heure_fin&#10;    ) {&#10;      (async () =&gt; {&#10;        setLoadingSillons(true); setErrorSillons('');&#10;        try {&#10;          const res = await fetch(`/api/schedules?ligne_id=${form.ligne_id}`);&#10;          const data = await res.json();&#10;          if (!res.ok) throw new Error(data?.error || 'Erreur chargement sillons');&#10;          const toM = t =&gt; { const [H,M] = String(t||'').split(':').map(Number); return (H||0)*60 + (M||0); };&#10;          const sM = toM(form.heure_debut), eM = toM(form.heure_fin);&#10;          const inRange = t =&gt; { const m = toM(t); return sM &lt;= eM ? (m&gt;=sM &amp;&amp; m&lt;=eM) : (m&gt;=sM || m&lt;=eM); };&#10;          const filtered = (Array.isArray(data) ? data : []).filter(s =&gt; inRange(s.departure_time || s.departureTime));&#10;          setSillons(filtered);&#10;        } catch(e) {&#10;          setErrorSillons(e.message || 'Erreur de chargement'); setSillons([]);&#10;        } finally { setLoadingSillons(false); }&#10;      })();&#10;    }&#10;  }, [step, form.type, form.impact_circulation, form.ligne_id, form.date_debut, form.date_fin, form.heure_debut, form.heure_fin]);&#10;&#10;  // Recharger sillons substitution (étape 4)&#10;  useEffect(() =&gt; {&#10;    if (&#10;      step === 4 &amp;&amp;&#10;      form.type === 'travaux' &amp;&amp;&#10;      form.substitutions &amp;&amp;&#10;      form.ligne_id &amp;&amp;&#10;      form.date_debut &amp;&amp;&#10;      form.date_fin&#10;    ) {&#10;      (async () =&gt; {&#10;        setLoadingSillonsSub(true); setErrorSillonsSub('');&#10;        try {&#10;          const res = await fetch(`/api/schedules?ligne_id=${form.ligne_id}&amp;is_substitution=1`);&#10;          const data = await res.json();&#10;          if (!res.ok) throw new Error(data?.error || 'Erreur chargement sillons substitution');&#10;          setSillonsSub(Array.isArray(data) ? data : []);&#10;        } catch(e) { setErrorSillonsSub(e.message || 'Erreur de chargement'); setSillonsSub([]); }&#10;        finally { setLoadingSillonsSub(false); }&#10;      })();&#10;    }&#10;  }, [step, form.type, form.substitutions, form.ligne_id, form.date_debut, form.date_fin]);&#10;&#10;  const nextStep = () =&gt; setStep(s =&gt; Math.min(ETAPES.length - 1, s + 1));&#10;  const prevStep = () =&gt; setStep(s =&gt; Math.max(0, s - 1));&#10;&#10;  const handleSubmit = async (e) =&gt; {&#10;    e.preventDefault();&#10;    setSaving(true);&#10;    try {&#10;      const payload = {&#10;        type: form.type,&#10;        ligne_id: form.ligne_id, // même si non utilisé côté PATCH pour l'instant&#10;        titre: form.titre,&#10;        description: form.contenu,&#10;        date_debut: form.date_debut ? `${form.date_debut}T${form.heure_debut || '00:00'}` : null,&#10;        date_fin: form.date_fin ? `${form.date_fin}T${form.heure_fin || '23:59'}` : null,&#10;        data: {&#10;          jours: form.jours,&#10;          horaire_interruption: form.type === 'travaux' ? { debut: form.heure_debut, fin: form.heure_fin } : undefined,&#10;          exclude_schedules: form.type === 'travaux' &amp;&amp; form.impact_circulation ? form.sillons_impactes : undefined,&#10;          substitutions: form.type === 'travaux' &amp;&amp; form.substitutions ? form.sillons_substitution : undefined,&#10;        }&#10;      };&#10;      Object.keys(payload.data).forEach(k =&gt; payload.data[k] === undefined &amp;&amp; delete payload.data[k]);&#10;&#10;      const res = await fetch(`/api/perturbations/${id}`, {&#10;        method: 'PATCH',&#10;        headers: { 'Content-Type': 'application/json' },&#10;        body: JSON.stringify(payload)&#10;      });&#10;      const body = await res.json().catch(() =&gt; ({}));&#10;      if (!res.ok) throw new Error(body?.error || 'Erreur lors de la mise à jour');&#10;      setSaving(false);&#10;      router.push('/espace/admin/perturbations');&#10;    } catch(e) {&#10;      alert(e.message || 'Erreur lors de la mise à jour');&#10;      setSaving(false);&#10;    }&#10;  };&#10;&#10;  if (loading) return &lt;div&gt;Chargement…&lt;/div&gt;;&#10;  if (loadError) return &lt;div className=&quot;text-danger&quot;&gt;{loadError}&lt;/div&gt;;&#10;  if (!loaded) return &lt;div&gt;Introuvable&lt;/div&gt;;&#10;&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h1&gt;Éditer la perturbation #{id}&lt;/h1&gt;&#10;      &lt;div className=&quot;sncf-stepper mb-4&quot;&gt;&#10;        &lt;ol className=&quot;sncf-stepper-list d-flex flex-row list-unstyled p-0 m-0&quot;&gt;&#10;          {ETAPES.map((etape, idx) =&gt; (&#10;            &lt;li key={etape} className={&#10;              'sncf-stepper-step flex-fill text-center ' +&#10;              (idx &lt; step ? 'completed' : idx === step ? 'active' : 'upcoming')&#10;            }&gt;&#10;              &lt;div className=&quot;sncf-stepper-circle mx-auto mb-1&quot;&gt;&#10;                {idx &lt; step ? &lt;span&gt;&amp;#10003;&lt;/span&gt; : idx + 1}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;sncf-stepper-label small&quot;&gt;{etape}&lt;/div&gt;&#10;            &lt;/li&gt;&#10;          ))}&#10;        &lt;/ol&gt;&#10;      &lt;/div&gt;&#10;      &lt;style jsx&gt;{`&#10;        .sncf-stepper-list { counter-reset: step; }&#10;        .sncf-stepper-step { position: relative; }&#10;        .sncf-stepper-circle { width: 2.2em; height: 2.2em; border-radius: 50%; background: #e9ecef; color: #6c757d; display: flex; align-items: center; justify-content: center; font-weight: bold; font-size: 1.1em; border: 2px solid #e9ecef; }&#10;        .sncf-stepper-step.active .sncf-stepper-circle { background: #0070f3; color: #fff; border-color: #0070f3; }&#10;        .sncf-stepper-step.completed .sncf-stepper-circle { background: #43a047; color: #fff; border-color: #43a047; }&#10;        .sncf-stepper-step:not(:last-child)::after { content: ''; position: absolute; top: 50%; right: -50%; left: 50%; height: 4px; background: #e9ecef; z-index: 0; transform: translateY(-50%); }&#10;        .sncf-stepper-step.completed:not(:last-child)::after { background: #43a047; }&#10;        .sncf-stepper-step.active .sncf-stepper-label { color: #0070f3; }&#10;        .sncf-stepper-step.completed .sncf-stepper-label { color: #43a047; }&#10;      `}&lt;/style&gt;&#10;      &lt;div className=&quot;mb-4 d-flex gap-2&quot;&gt;&#10;        &lt;button type=&quot;button&quot; className=&quot;btn btn-outline-secondary&quot; onClick={prevStep} disabled={step === 0}&gt;Previous&lt;/button&gt;&#10;        &lt;button type=&quot;button&quot; className=&quot;btn btn-outline-primary&quot; onClick={nextStep} disabled={((form.type !== &quot;travaux&quot; &amp;&amp; step &gt;= 3) || (form.type === &quot;travaux&quot; &amp;&amp; step &gt;= 5))}&gt;Next&lt;/button&gt;&#10;      &lt;/div&gt;&#10;      &lt;form onSubmit={handleSubmit}&gt;&#10;        {step === 0 &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Général&lt;/h2&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Type de perturbation&lt;/label&gt;&#10;              &lt;select className=&quot;form-select&quot; value={form.type} onChange={e =&gt; setForm(f =&gt; ({ ...f, type: e.target.value }))} required&gt;&#10;                {PERTURB_TYPES.map(t =&gt; &lt;option key={t.value} value={t.value}&gt;{t.label}&lt;/option&gt;)}&#10;              &lt;/select&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Ligne concernée&lt;/label&gt;&#10;              {loadingLignes ? (&#10;                &lt;div&gt;Chargement des lignes…&lt;/div&gt;&#10;              ) : errorLignes ? (&#10;                &lt;div className=&quot;text-danger&quot;&gt;{errorLignes}&lt;/div&gt;&#10;              ) : (&#10;                &lt;select className=&quot;form-select&quot; value={form.ligne_id} onChange={e =&gt; setForm(f =&gt; ({ ...f, ligne_id: e.target.value }))} required&gt;&#10;                  &lt;option value=&quot;&quot;&gt;Choisir…&lt;/option&gt;&#10;                  {lignes.map(l =&gt; (&#10;                    &lt;option key={l.id} value={l.id}&gt;{l.nom || l.name || `Ligne #${l.id}`}&lt;/option&gt;&#10;                  ))}&#10;                &lt;/select&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {step === 1 &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Diffusion&lt;/h2&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Date de début de diffusion&lt;/label&gt;&#10;              &lt;input type=&quot;date&quot; className=&quot;form-control&quot; value={form.date_debut} onChange={e =&gt; setForm(f =&gt; ({ ...f, date_debut: e.target.value }))} required /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Date de fin de diffusion&lt;/label&gt;&#10;              &lt;input type=&quot;date&quot; className=&quot;form-control&quot; value={form.date_fin} onChange={e =&gt; setForm(f =&gt; ({ ...f, date_fin: e.target.value }))} required /&gt;&#10;            &lt;/div&gt;&#10;            {form.type === 'travaux' &amp;&amp; (&#10;              &lt;&gt;&#10;                &lt;div className=&quot;mb-3&quot;&gt;&#10;                  &lt;label className=&quot;form-label&quot;&gt;Jours de travaux&lt;/label&gt;&#10;                  &lt;div className=&quot;d-flex flex-wrap gap-2&quot;&gt;&#10;                    {JOURS.map((j, idx) =&gt; (&#10;                      &lt;label key={j} className=&quot;form-check&quot;&gt;&#10;                        &lt;input type=&quot;checkbox&quot; className=&quot;form-check-input&quot; checked={form.jours.includes(idx)} onChange={e =&gt; {&#10;                          setForm(f =&gt; ({&#10;                            ...f,&#10;                            jours: e.target.checked ? [...f.jours, idx] : f.jours.filter(d =&gt; d !== idx)&#10;                          }));&#10;                        }} /&gt;&#10;                        &lt;span className=&quot;form-check-label ms-1&quot;&gt;{j}&lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;mb-3 row&quot;&gt;&#10;                  &lt;div className=&quot;col-md-6&quot;&gt;&#10;                    &lt;label className=&quot;form-label&quot;&gt;Heure de début des travaux&lt;/label&gt;&#10;                    &lt;input type=&quot;time&quot; className=&quot;form-control&quot; value={form.heure_debut} onChange={e =&gt; setForm(f =&gt; ({ ...f, heure_debut: e.target.value }))} required={form.type === 'travaux'} /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;col-md-6&quot;&gt;&#10;                    &lt;label className=&quot;form-label&quot;&gt;Heure de fin des travaux&lt;/label&gt;&#10;                    &lt;input type=&quot;time&quot; className=&quot;form-control&quot; value={form.heure_fin} onChange={e =&gt; setForm(f =&gt; ({ ...f, heure_fin: e.target.value }))} required={form.type === 'travaux'} /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;        {step === 2 &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Contenu&lt;/h2&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Titre&lt;/label&gt;&#10;              &lt;input type=&quot;text&quot; className=&quot;form-control&quot; value={form.titre} onChange={e =&gt; setForm(f =&gt; ({ ...f, titre: e.target.value }))} required /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Contenu&lt;/label&gt;&#10;              &lt;Editor&#10;                apiKey=&quot;1l7z08kf4ai6ze5gyn4g3ge34a69w9m07arnmj0cvug2ptp8&quot;&#10;                value={form.contenu}&#10;                init={{&#10;                  height: 200,&#10;                  menubar: false,&#10;                  plugins: [&#10;                    'advlist autolink lists link image charmap preview anchor',&#10;                    'searchreplace visualblocks code fullscreen',&#10;                    'insertdatetime media table paste help wordcount'&#10;                  ],&#10;                  toolbar:&#10;                    'undo redo | formatselect | bold italic underline | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | help',&#10;                }}&#10;                onEditorChange={val =&gt; setForm(f =&gt; ({ ...f, contenu: val }))}&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {step === 3 &amp;&amp; form.type === 'travaux' &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Circulation&lt;/h2&gt;&#10;            &lt;div className=&quot;form-check mb-3&quot;&gt;&#10;              &lt;input type=&quot;checkbox&quot; className=&quot;form-check-input&quot; id=&quot;impact-circulation&quot; checked={form.impact_circulation} onChange={e =&gt; setForm(f =&gt; ({ ...f, impact_circulation: e.target.checked, sillons_impactes: [] }))} /&gt;&#10;              &lt;label className=&quot;form-check-label ms-1&quot; htmlFor=&quot;impact-circulation&quot;&gt;Cette perturbation impacte la circulation sur la ligne&lt;/label&gt;&#10;            &lt;/div&gt;&#10;            {form.impact_circulation &amp;&amp; (&#10;              &lt;div&gt;&#10;                {loadingSillons ? &lt;div&gt;Chargement des sillons…&lt;/div&gt; : errorSillons ? &lt;div className=&quot;text-danger&quot;&gt;{errorSillons}&lt;/div&gt; : sillons.length === 0 ? &lt;div className=&quot;text-muted&quot;&gt;Aucun sillon trouvé pour la période et la plage horaire sélectionnées.&lt;/div&gt; : (&#10;                  &lt;div&gt;&#10;                    &lt;div className=&quot;mb-2&quot;&gt;Sélectionnez les sillons qui ne circuleront pas :&lt;/div&gt;&#10;                    &lt;div className=&quot;list-group&quot;&gt;&#10;                      {sillons.map(s =&gt; (&#10;                        &lt;label key={s.id} className=&quot;list-group-item d-flex align-items-center gap-2&quot;&gt;&#10;                          &lt;input type=&quot;checkbox&quot; className=&quot;form-check-input&quot; checked={form.sillons_impactes.includes(s.id)} onChange={e =&gt; setForm(f =&gt; ({ ...f, sillons_impactes: e.target.checked ? [...f.sillons_impactes, s.id] : f.sillons_impactes.filter(id =&gt; id !== s.id) }))} /&gt;&#10;                          &lt;span&gt;{`[${s.train_number || ('#'+s.id)}] (${(s.departure_time || s.departureTime || '').slice(0,5)} / ${(s.arrival_time || s.arrivalTime || '').slice(0,5)})`}&lt;/span&gt;&#10;                        &lt;/label&gt;&#10;                      ))}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;        {step === 4 &amp;&amp; form.type === 'travaux' &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Substitutions&lt;/h2&gt;&#10;            &lt;div className=&quot;form-check mb-3&quot;&gt;&#10;              &lt;input type=&quot;checkbox&quot; className=&quot;form-check-input&quot; id=&quot;substitutions&quot; checked={form.substitutions} onChange={e =&gt; setForm(f =&gt; ({ ...f, substitutions: e.target.checked, sillons_substitution: [] }))} /&gt;&#10;              &lt;label className=&quot;form-check-label ms-1&quot; htmlFor=&quot;substitutions&quot;&gt;Des substitutions sont prévues&lt;/label&gt;&#10;            &lt;/div&gt;&#10;            {form.substitutions &amp;&amp; (&#10;              &lt;div&gt;&#10;                {loadingSillonsSub ? &lt;div&gt;Chargement des sillons de substitution…&lt;/div&gt; : errorSillonsSub ? &lt;div className=&quot;text-danger&quot;&gt;{errorSillonsSub}&lt;/div&gt; : sillonsSub.length === 0 ? &lt;div className=&quot;text-muted&quot;&gt;Aucun sillon de substitution trouvé pour la période sélectionnée.&lt;/div&gt; : (&#10;                  &lt;div&gt;&#10;                    &lt;div className=&quot;mb-2&quot;&gt;Sélectionnez les sillons de substitution à activer :&lt;/div&gt;&#10;                    &lt;div className=&quot;list-group&quot;&gt;&#10;                      {sillonsSub.map(s =&gt; (&#10;                        &lt;label key={s.id} className=&quot;list-group-item d-flex align-items-center gap-2&quot;&gt;&#10;                          &lt;input type=&quot;checkbox&quot; className=&quot;form-check-input&quot; checked={form.sillons_substitution.includes(s.id)} onChange={e =&gt; setForm(f =&gt; ({ ...f, sillons_substitution: e.target.checked ? [...f.sillons_substitution, s.id] : f.sillons_substitution.filter(id =&gt; id !== s.id) }))} /&gt;&#10;                          &lt;span&gt;{`[${s.train_number || ('#'+s.id)}] (${(s.departure_time || s.departureTime || '').slice(0,5)} / ${(s.arrival_time || s.arrivalTime || '').slice(0,5)})`}&lt;/span&gt;&#10;                        &lt;/label&gt;&#10;                      ))}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;        {((step === 3 &amp;&amp; form.type !== 'travaux') || (step === 5 &amp;&amp; form.type === 'travaux')) &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Récapitulatif&lt;/h2&gt;&#10;            &lt;ul className=&quot;list-group mb-3&quot;&gt;&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Type :&lt;/strong&gt; {PERTURB_TYPES.find(t =&gt; t.value === form.type)?.label}&lt;/li&gt;&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Ligne :&lt;/strong&gt; {lignes.find(l =&gt; String(l.id) === String(form.ligne_id))?.nom || lignes.find(l =&gt; String(l.id) === String(form.ligne_id))?.name || form.ligne_id}&lt;/li&gt;&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Date de début :&lt;/strong&gt; {form.date_debut} {form.heure_debut}&lt;/li&gt;&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Date de fin :&lt;/strong&gt; {form.date_fin} {form.heure_fin}&lt;/li&gt;&#10;              {form.type === 'travaux' &amp;&amp; (&#10;                &lt;&gt;&#10;                  &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Jours de travaux :&lt;/strong&gt; {form.jours.map(j =&gt; JOURS[j]).join(', ')}&lt;/li&gt;&#10;                  &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Impact circulation :&lt;/strong&gt; {form.impact_circulation ? 'Oui' : 'Non'}&lt;/li&gt;&#10;                  {form.impact_circulation &amp;&amp; (&#10;                    &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Sillons non circulants :&lt;/strong&gt; {form.sillons_impactes.length ? form.sillons_impactes.map(id =&gt; { const s = sillons.find(si =&gt; si.id === id); return s ? (`[${s.train_number || ('#'+s.id)}] (${(s.departure_time || s.departureTime || '').slice(0,5)} / ${(s.arrival_time || s.arrivalTime || '').slice(0,5)})`) : `#${id}`; }).join(', ') : 'Aucun'}&lt;/li&gt;&#10;                  )}&#10;                  &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Substitutions :&lt;/strong&gt; {form.substitutions ? 'Oui' : 'Non'}&lt;/li&gt;&#10;                  {form.substitutions &amp;&amp; (&#10;                    &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Sillons de substitution :&lt;/strong&gt; {form.sillons_substitution.length ? form.sillons_substitution.map(id =&gt; { const s = sillonsSub.find(si =&gt; si.id === id); return s ? (`[${s.train_number || ('#'+s.id)}] (${(s.departure_time || s.departureTime || '').slice(0,5)} / ${(s.arrival_time || s.arrivalTime || '').slice(0,5)})`) : `#${id}`; }).join(', ') : 'Aucun'}&lt;/li&gt;&#10;                  )}&#10;                &lt;/&gt;&#10;              )}&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Titre :&lt;/strong&gt; {form.titre}&lt;/li&gt;&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Contenu :&lt;/strong&gt; &lt;span dangerouslySetInnerHTML={{__html: form.contenu}} /&gt;&lt;/li&gt;&#10;            &lt;/ul&gt;&#10;            &lt;button type=&quot;submit&quot; className=&quot;btn btn-success&quot; disabled={saving}&gt;{saving ? 'Mise à jour…' : 'Mettre à jour la perturbation'}&lt;/button&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        &lt;div className=&quot;d-flex justify-content-between mt-4&quot;&gt;&#10;          &lt;button type=&quot;button&quot; className=&quot;btn btn-outline-secondary&quot; onClick={prevStep} disabled={step === 0}&gt;Précédent&lt;/button&gt;&#10;          {((form.type !== 'travaux' &amp;&amp; step &lt; 3) || (form.type === 'travaux' &amp;&amp; step &lt; 5)) &amp;&amp; (&#10;            &lt;button&#10;              type=&quot;button&quot;&#10;              className=&quot;btn btn-primary&quot;&#10;              onClick={nextStep}&#10;              disabled={&#10;                (step === 0 &amp;&amp; (!form.type || !form.ligne_id)) ||&#10;                (step === 1 &amp;&amp; (&#10;                  !form.date_debut ||&#10;                  !form.date_fin ||&#10;                  (form.type === 'travaux' &amp;&amp; (&#10;                    form.jours.length === 0 ||&#10;                    !form.heure_debut ||&#10;                    !form.heure_fin&#10;                  ))&#10;                )) ||&#10;                (step === 2 &amp;&amp; (!form.titre.trim() || !form.contenu || form.contenu === '&lt;p&gt;&lt;br&gt;&lt;/p&gt;')) ||&#10;                (step === 3 &amp;&amp; form.type === 'travaux' &amp;&amp; form.impact_circulation &amp;&amp; sillons.length &gt; 0 &amp;&amp; form.sillons_impactes.length === 0) ||&#10;                (step === 4 &amp;&amp; form.type === 'travaux' &amp;&amp; form.substitutions &amp;&amp; sillonsSub.length &gt; 0 &amp;&amp; form.sillons_substitution.length === 0)&#10;              }&#10;            &gt;&#10;              Suivant&#10;            &lt;/button&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import React, { useState, useEffect, useCallback } from &quot;react&quot;;&#10;import { useRouter, useParams } from &quot;next/navigation&quot;;&#10;import { Editor } from '@tinymce/tinymce-react';&#10;&#10;const ETAPES = [&#10;  &quot;Général&quot;,&#10;  &quot;Diffusion&quot;,&#10;  &quot;Contenu&quot;,&#10;  &quot;Circulation&quot;,&#10;  &quot;Substitutions&quot;,&#10;  &quot;Récapitulatif&quot;&#10;];&#10;&#10;const PERTURB_TYPES = [&#10;  { value: &quot;travaux&quot;, label: &quot;Travaux&quot; },&#10;  { value: &quot;infos&quot;, label: &quot;Information&quot; },&#10;  { value: &quot;avertissement&quot;, label: &quot;Avertissement&quot; },&#10;];&#10;&#10;const JOURS = [&quot;Lundi&quot;, &quot;Mardi&quot;, &quot;Mercredi&quot;, &quot;Jeudi&quot;, &quot;Vendredi&quot;, &quot;Samedi&quot;, &quot;Dimanche&quot;];&#10;&#10;export default function EditionPerturbationLigne() {&#10;  const router = useRouter();&#10;  const params = useParams();&#10;  const id = params?.id;&#10;&#10;  const [loaded, setLoaded] = useState(false);&#10;  const [loading, setLoading] = useState(true);&#10;  const [loadError, setLoadError] = useState(&quot;&quot;);&#10;  const [saving, setSaving] = useState(false);&#10;&#10;  const [step, setStep] = useState(0);&#10;  const [form, setForm] = useState({&#10;    type: &quot;travaux&quot;,&#10;    ligne_id: &quot;&quot;,&#10;    date_debut: &quot;&quot;,&#10;    date_fin: &quot;&quot;,&#10;    jours: [],&#10;    heure_debut: &quot;&quot;,&#10;    heure_fin: &quot;&quot;,&#10;    titre: &quot;&quot;,&#10;    contenu: &quot;&quot;,&#10;    impact_circulation: false,&#10;    sillons_impactes: [],&#10;    substitutions: false,&#10;    sillons_substitution: [],&#10;  });&#10;&#10;  const [lignes, setLignes] = useState([]);&#10;  const [loadingLignes, setLoadingLignes] = useState(true);&#10;  const [errorLignes, setErrorLignes] = useState(&quot;&quot;);&#10;&#10;  const [sillons, setSillons] = useState([]);&#10;  const [loadingSillons, setLoadingSillons] = useState(false);&#10;  const [errorSillons, setErrorSillons] = useState(&quot;&quot;);&#10;&#10;  const [sillonsSub, setSillonsSub] = useState([]);&#10;  const [loadingSillonsSub, setLoadingSillonsSub] = useState(false);&#10;  const [errorSillonsSub, setErrorSillonsSub] = useState(&quot;&quot;);&#10;&#10;  const parseDate = useCallback((dt, mode) =&gt; {&#10;    if (!dt) return &quot;&quot;;&#10;    // dt peut être 'YYYY-MM-DD HH:MM:SS' ou ISO&#10;    const parts = dt.includes('T') ? dt.split('T') : dt.split(' ');&#10;    if (mode === 'date') return parts[0];&#10;    if (mode === 'time') {&#10;      const time = parts[1] || '';&#10;      return time.slice(0,5); // HH:MM&#10;    }&#10;    return dt;&#10;  }, []);&#10;&#10;  // Charger lignes&#10;  useEffect(() =&gt; {&#10;    async function fetchLignes() {&#10;      setLoadingLignes(true);&#10;      setErrorLignes(&quot;&quot;);&#10;      try {&#10;        const res = await fetch('/api/lignes', { cache: 'no-store' });&#10;        const data = await res.json();&#10;        if (!res.ok) throw new Error(data?.error || 'Erreur chargement lignes');&#10;        setLignes(data.lignes || []);&#10;      } catch (e) {&#10;        setErrorLignes(e.message || 'Erreur de chargement');&#10;      } finally {&#10;        setLoadingLignes(false);&#10;      }&#10;    }&#10;    fetchLignes();&#10;  }, []);&#10;&#10;  // Charger la perturbation&#10;  useEffect(() =&gt; {&#10;    if (!id) return;&#10;    async function fetchPerturbation() {&#10;      setLoading(true);&#10;      setLoadError(&quot;&quot;);&#10;      try {&#10;        const res = await fetch(`/api/perturbations/${id}`, { cache: 'no-store' });&#10;        const data = await res.json();&#10;        if (!res.ok) throw new Error(data?.error || 'Erreur chargement perturbation');&#10;        const p = data.perturbation || {};&#10;        let parsedData = {};&#10;        try { parsedData = p.data ? (typeof p.data === 'string' ? JSON.parse(p.data) : p.data) : {}; } catch { parsedData = {}; }&#10;&#10;        const isTravaux = p.type === 'travaux';&#10;        const horaire = parsedData.horaire_interruption || {};&#10;&#10;        setForm(f =&gt; ({&#10;          ...f,&#10;            type: p.type || 'travaux',&#10;            ligne_id: String(p.ligne_id || ''),&#10;            date_debut: parseDate(p.date_debut, 'date'),&#10;            date_fin: parseDate(p.date_fin, 'date'),&#10;            heure_debut: isTravaux ? (horaire.debut || parseDate(p.date_debut, 'time') || '') : '',&#10;            heure_fin: isTravaux ? (horaire.fin || parseDate(p.date_fin, 'time') || '') : '',&#10;            jours: Array.isArray(parsedData.jours) ? parsedData.jours : [],&#10;            titre: p.titre || '',&#10;            contenu: p.description || '',&#10;            impact_circulation: !!parsedData.exclude_schedules,&#10;            sillons_impactes: Array.isArray(parsedData.exclude_schedules) ? parsedData.exclude_schedules : [],&#10;            substitutions: !!parsedData.substitutions,&#10;            sillons_substitution: Array.isArray(parsedData.substitutions) ? parsedData.substitutions : [],&#10;        }));&#10;        setLoaded(true);&#10;      } catch (e) {&#10;        setLoadError(e.message || 'Erreur de chargement');&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    }&#10;    fetchPerturbation();&#10;  }, [id, parseDate]);&#10;&#10;  // Recharger sillons (impact circulation) quand conditions remplies (étape 3)&#10;  useEffect(() =&gt; {&#10;    if (&#10;      step === 3 &amp;&amp;&#10;      form.type === 'travaux' &amp;&amp;&#10;      form.impact_circulation &amp;&amp;&#10;      form.ligne_id &amp;&amp;&#10;      form.date_debut &amp;&amp;&#10;      form.date_fin &amp;&amp;&#10;      form.heure_debut &amp;&amp;&#10;      form.heure_fin&#10;    ) {&#10;      (async () =&gt; {&#10;        setLoadingSillons(true); setErrorSillons('');&#10;        try {&#10;          const res = await fetch(`/api/schedules?ligne_id=${form.ligne_id}`);&#10;          const data = await res.json();&#10;          if (!res.ok) throw new Error(data?.error || 'Erreur chargement sillons');&#10;          const toM = t =&gt; { const [H,M] = String(t||'').split(':').map(Number); return (H||0)*60 + (M||0); };&#10;          const sM = toM(form.heure_debut), eM = toM(form.heure_fin);&#10;          const inRange = t =&gt; { const m = toM(t); return sM &lt;= eM ? (m&gt;=sM &amp;&amp; m&lt;=eM) : (m&gt;=sM || m&lt;=eM); };&#10;          const filtered = (Array.isArray(data) ? data : []).filter(s =&gt; inRange(s.departure_time || s.departureTime));&#10;          setSillons(filtered);&#10;        } catch(e) {&#10;          setErrorSillons(e.message || 'Erreur de chargement'); setSillons([]);&#10;        } finally { setLoadingSillons(false); }&#10;      })();&#10;    }&#10;  }, [step, form.type, form.impact_circulation, form.ligne_id, form.date_debut, form.date_fin, form.heure_debut, form.heure_fin]);&#10;&#10;  // Recharger sillons substitution (étape 4)&#10;  useEffect(() =&gt; {&#10;    if (&#10;      step === 4 &amp;&amp;&#10;      form.type === 'travaux' &amp;&amp;&#10;      form.substitutions &amp;&amp;&#10;      form.ligne_id &amp;&amp;&#10;      form.date_debut &amp;&amp;&#10;      form.date_fin&#10;    ) {&#10;      (async () =&gt; {&#10;        setLoadingSillonsSub(true); setErrorSillonsSub('');&#10;        try {&#10;          const res = await fetch(`/api/schedules?ligne_id=${form.ligne_id}&amp;is_substitution=1`);&#10;          const data = await res.json();&#10;          if (!res.ok) throw new Error(data?.error || 'Erreur chargement sillons substitution');&#10;          setSillonsSub(Array.isArray(data) ? data : []);&#10;        } catch(e) { setErrorSillonsSub(e.message || 'Erreur de chargement'); setSillonsSub([]); }&#10;        finally { setLoadingSillonsSub(false); }&#10;      })();&#10;    }&#10;  }, [step, form.type, form.substitutions, form.ligne_id, form.date_debut, form.date_fin]);&#10;&#10;  const nextStep = () =&gt; setStep(s =&gt; Math.min(ETAPES.length - 1, s + 1));&#10;  const prevStep = () =&gt; setStep(s =&gt; Math.max(0, s - 1));&#10;&#10;  const handleSubmit = async (e) =&gt; {&#10;    e.preventDefault();&#10;    setSaving(true);&#10;    try {&#10;      const payload = {&#10;        type: form.type,&#10;        ligne_id: form.ligne_id, // même si non utilisé côté PATCH pour l'instant&#10;        titre: form.titre,&#10;        description: form.contenu,&#10;        date_debut: form.date_debut ? `${form.date_debut}T${form.heure_debut || '00:00'}` : null,&#10;        date_fin: form.date_fin ? `${form.date_fin}T${form.heure_fin || '23:59'}` : null,&#10;        data: {&#10;          jours: form.jours,&#10;          horaire_interruption: form.type === 'travaux' ? { debut: form.heure_debut, fin: form.heure_fin } : undefined,&#10;          exclude_schedules: form.type === 'travaux' &amp;&amp; form.impact_circulation ? form.sillons_impactes : undefined,&#10;          substitutions: form.type === 'travaux' &amp;&amp; form.substitutions ? form.sillons_substitution : undefined,&#10;        }&#10;      };&#10;      Object.keys(payload.data).forEach(k =&gt; payload.data[k] === undefined &amp;&amp; delete payload.data[k]);&#10;&#10;      const res = await fetch(`/api/perturbations/${id}`, {&#10;        method: 'PATCH',&#10;        headers: { 'Content-Type': 'application/json' },&#10;        body: JSON.stringify(payload)&#10;      });&#10;      const body = await res.json().catch(() =&gt; ({}));&#10;      if (!res.ok) throw new Error(body?.error || 'Erreur lors de la mise à jour');&#10;      setSaving(false);&#10;      router.push('/espace/admin/perturbations');&#10;    } catch(e) {&#10;      alert(e.message || 'Erreur lors de la mise à jour');&#10;      setSaving(false);&#10;    }&#10;  };&#10;&#10;  if (loading) return &lt;div&gt;Chargement…&lt;/div&gt;;&#10;  if (loadError) return &lt;div className=&quot;text-danger&quot;&gt;{loadError}&lt;/div&gt;;&#10;  if (!loaded) return &lt;div&gt;Introuvable&lt;/div&gt;;&#10;&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h1&gt;Éditer la perturbation #{id}&lt;/h1&gt;&#10;      &lt;div className=&quot;sncf-stepper mb-4&quot;&gt;&#10;        &lt;ol className=&quot;sncf-stepper-list d-flex flex-row list-unstyled p-0 m-0&quot;&gt;&#10;          {ETAPES.map((etape, idx) =&gt; (&#10;            &lt;li key={etape} className={&#10;              'sncf-stepper-step flex-fill text-center ' +&#10;              (idx &lt; step ? 'completed' : idx === step ? 'active' : 'upcoming')&#10;            }&gt;&#10;              &lt;div className=&quot;sncf-stepper-circle mx-auto mb-1&quot;&gt;&#10;                {idx &lt; step ? &lt;span&gt;&amp;#10003;&lt;/span&gt; : idx + 1}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;sncf-stepper-label small&quot;&gt;{etape}&lt;/div&gt;&#10;            &lt;/li&gt;&#10;          ))}&#10;        &lt;/ol&gt;&#10;      &lt;/div&gt;&#10;      &lt;style jsx&gt;{`&#10;        .sncf-stepper-list { counter-reset: step; }&#10;        .sncf-stepper-step { position: relative; }&#10;        .sncf-stepper-circle { width: 2.2em; height: 2.2em; border-radius: 50%; background: #e9ecef; color: #6c757d; display: flex; align-items: center; justify-content: center; font-weight: bold; font-size: 1.1em; border: 2px solid #e9ecef; }&#10;        .sncf-stepper-step.active .sncf-stepper-circle { background: #0070f3; color: #fff; border-color: #0070f3; }&#10;        .sncf-stepper-step.completed .sncf-stepper-circle { background: #43a047; color: #fff; border-color: #43a047; }&#10;        .sncf-stepper-step:not(:last-child)::after { content: ''; position: absolute; top: 50%; right: -50%; left: 50%; height: 4px; background: #e9ecef; z-index: 0; transform: translateY(-50%); }&#10;        .sncf-stepper-step.completed:not(:last-child)::after { background: #43a047; }&#10;        .sncf-stepper-step.active .sncf-stepper-label { color: #0070f3; }&#10;        .sncf-stepper-step.completed .sncf-stepper-label { color: #43a047; }&#10;      `}&lt;/style&gt;&#10;      &lt;div className=&quot;mb-4 d-flex gap-2&quot;&gt;&#10;        &lt;button type=&quot;button&quot; className=&quot;btn btn-outline-secondary&quot; onClick={prevStep} disabled={step === 0}&gt;Previous&lt;/button&gt;&#10;        &lt;button type=&quot;button&quot; className=&quot;btn btn-outline-primary&quot; onClick={nextStep} disabled={((form.type !== &quot;travaux&quot; &amp;&amp; step &gt;= 3) || (form.type === &quot;travaux&quot; &amp;&amp; step &gt;= 5))}&gt;Next&lt;/button&gt;&#10;      &lt;/div&gt;&#10;      &lt;form onSubmit={handleSubmit}&gt;&#10;        {step === 0 &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Général&lt;/h2&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Type de perturbation&lt;/label&gt;&#10;              &lt;select className=&quot;form-select&quot; value={form.type} onChange={e =&gt; setForm(f =&gt; ({ ...f, type: e.target.value }))} required&gt;&#10;                {PERTURB_TYPES.map(t =&gt; &lt;option key={t.value} value={t.value}&gt;{t.label}&lt;/option&gt;)}&#10;              &lt;/select&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Ligne concernée&lt;/label&gt;&#10;              {loadingLignes ? (&#10;                &lt;div&gt;Chargement des lignes…&lt;/div&gt;&#10;              ) : errorLignes ? (&#10;                &lt;div className=&quot;text-danger&quot;&gt;{errorLignes}&lt;/div&gt;&#10;              ) : (&#10;                &lt;select className=&quot;form-select&quot; value={form.ligne_id} onChange={e =&gt; setForm(f =&gt; ({ ...f, ligne_id: e.target.value }))} required&gt;&#10;                  &lt;option value=&quot;&quot;&gt;Choisir…&lt;/option&gt;&#10;                  {lignes.map(l =&gt; (&#10;                    &lt;option key={l.id} value={l.id}&gt;{`${l.depart_name || 'Inconnue'} &lt;&gt; ${l.arrivee_name || 'Inconnue'}`}&lt;/option&gt;&#10;                  ))}&#10;                &lt;/select&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {step === 1 &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Diffusion&lt;/h2&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Date de début de diffusion&lt;/label&gt;&#10;              &lt;input type=&quot;date&quot; className=&quot;form-control&quot; value={form.date_debut} onChange={e =&gt; setForm(f =&gt; ({ ...f, date_debut: e.target.value }))} required /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Date de fin de diffusion&lt;/label&gt;&#10;              &lt;input type=&quot;date&quot; className=&quot;form-control&quot; value={form.date_fin} onChange={e =&gt; setForm(f =&gt; ({ ...f, date_fin: e.target.value }))} required /&gt;&#10;            &lt;/div&gt;&#10;            {form.type === 'travaux' &amp;&amp; (&#10;              &lt;&gt;&#10;                &lt;div className=&quot;mb-3&quot;&gt;&#10;                  &lt;label className=&quot;form-label&quot;&gt;Jours de travaux&lt;/label&gt;&#10;                  &lt;div className=&quot;d-flex flex-wrap gap-2&quot;&gt;&#10;                    {JOURS.map((j, idx) =&gt; (&#10;                      &lt;label key={j} className=&quot;form-check&quot;&gt;&#10;                        &lt;input type=&quot;checkbox&quot; className=&quot;form-check-input&quot; checked={form.jours.includes(idx)} onChange={e =&gt; {&#10;                          setForm(f =&gt; ({&#10;                            ...f,&#10;                            jours: e.target.checked ? [...f.jours, idx] : f.jours.filter(d =&gt; d !== idx)&#10;                          }));&#10;                        }} /&gt;&#10;                        &lt;span className=&quot;form-check-label ms-1&quot;&gt;{j}&lt;/span&gt;&#10;                      &lt;/label&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;mb-3 row&quot;&gt;&#10;                  &lt;div className=&quot;col-md-6&quot;&gt;&#10;                    &lt;label className=&quot;form-label&quot;&gt;Heure de début des travaux&lt;/label&gt;&#10;                    &lt;input type=&quot;time&quot; className=&quot;form-control&quot; value={form.heure_debut} onChange={e =&gt; setForm(f =&gt; ({ ...f, heure_debut: e.target.value }))} required={form.type === 'travaux'} /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;col-md-6&quot;&gt;&#10;                    &lt;label className=&quot;form-label&quot;&gt;Heure de fin des travaux&lt;/label&gt;&#10;                    &lt;input type=&quot;time&quot; className=&quot;form-control&quot; value={form.heure_fin} onChange={e =&gt; setForm(f =&gt; ({ ...f, heure_fin: e.target.value }))} required={form.type === 'travaux'} /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;        {step === 2 &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Contenu&lt;/h2&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Titre&lt;/label&gt;&#10;              &lt;input type=&quot;text&quot; className=&quot;form-control&quot; value={form.titre} onChange={e =&gt; setForm(f =&gt; ({ ...f, titre: e.target.value }))} required /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;mb-3&quot;&gt;&#10;              &lt;label className=&quot;form-label&quot;&gt;Contenu&lt;/label&gt;&#10;              &lt;Editor&#10;                apiKey=&quot;1l7z08kf4ai6ze5gyn4g3ge34a69w9m07arnmj0cvug2ptp8&quot;&#10;                value={form.contenu}&#10;                init={{&#10;                  height: 200,&#10;                  menubar: false,&#10;                  plugins: [&#10;                    'advlist autolink lists link image charmap preview anchor',&#10;                    'searchreplace visualblocks code fullscreen',&#10;                    'insertdatetime media table paste help wordcount'&#10;                  ],&#10;                  toolbar:&#10;                    'undo redo | formatselect | bold italic underline | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | help',&#10;                }}&#10;                onEditorChange={val =&gt; setForm(f =&gt; ({ ...f, contenu: val }))}&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {step === 3 &amp;&amp; form.type === 'travaux' &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Circulation&lt;/h2&gt;&#10;            &lt;div className=&quot;form-check mb-3&quot;&gt;&#10;              &lt;input type=&quot;checkbox&quot; className=&quot;form-check-input&quot; id=&quot;impact-circulation&quot; checked={form.impact_circulation} onChange={e =&gt; setForm(f =&gt; ({ ...f, impact_circulation: e.target.checked, sillons_impactes: [] }))} /&gt;&#10;              &lt;label className=&quot;form-check-label ms-1&quot; htmlFor=&quot;impact-circulation&quot;&gt;Cette perturbation impacte la circulation sur la ligne&lt;/label&gt;&#10;            &lt;/div&gt;&#10;            {form.impact_circulation &amp;&amp; (&#10;              &lt;div&gt;&#10;                {loadingSillons ? &lt;div&gt;Chargement des sillons…&lt;/div&gt; : errorSillons ? &lt;div className=&quot;text-danger&quot;&gt;{errorSillons}&lt;/div&gt; : sillons.length === 0 ? &lt;div className=&quot;text-muted&quot;&gt;Aucun sillon trouvé pour la période et la plage horaire sélectionnées.&lt;/div&gt; : (&#10;                  &lt;div&gt;&#10;                    &lt;div className=&quot;mb-2&quot;&gt;Sélectionnez les sillons qui ne circuleront pas :&lt;/div&gt;&#10;                    &lt;div className=&quot;list-group&quot;&gt;&#10;                      {sillons.map(s =&gt; (&#10;                        &lt;label key={s.id} className=&quot;list-group-item d-flex align-items-center gap-2&quot;&gt;&#10;                          &lt;input type=&quot;checkbox&quot; className=&quot;form-check-input&quot; checked={form.sillons_impactes.includes(s.id)} onChange={e =&gt; setForm(f =&gt; ({ ...f, sillons_impactes: e.target.checked ? [...f.sillons_impactes, s.id] : f.sillons_impactes.filter(id =&gt; id !== s.id) }))} /&gt;&#10;                          &lt;span&gt;{`[${s.train_number || ('#'+s.id)}] (${(s.departure_time || s.departureTime || '').slice(0,5)} / ${(s.arrival_time || s.arrivalTime || '').slice(0,5)})`}&lt;/span&gt;&#10;                        &lt;/label&gt;&#10;                      ))}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;        {step === 4 &amp;&amp; form.type === 'travaux' &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Substitutions&lt;/h2&gt;&#10;            &lt;div className=&quot;form-check mb-3&quot;&gt;&#10;              &lt;input type=&quot;checkbox&quot; className=&quot;form-check-input&quot; id=&quot;substitutions&quot; checked={form.substitutions} onChange={e =&gt; setForm(f =&gt; ({ ...f, substitutions: e.target.checked, sillons_substitution: [] }))} /&gt;&#10;              &lt;label className=&quot;form-check-label ms-1&quot; htmlFor=&quot;substitutions&quot;&gt;Des substitutions sont prévues&lt;/label&gt;&#10;            &lt;/div&gt;&#10;            {form.substitutions &amp;&amp; (&#10;              &lt;div&gt;&#10;                {loadingSillonsSub ? &lt;div&gt;Chargement des sillons de substitution…&lt;/div&gt; : errorSillonsSub ? &lt;div className=&quot;text-danger&quot;&gt;{errorSillonsSub}&lt;/div&gt; : sillonsSub.length === 0 ? &lt;div className=&quot;text-muted&quot;&gt;Aucun sillon de substitution trouvé pour la période sélectionnée.&lt;/div&gt; : (&#10;                  &lt;div&gt;&#10;                    &lt;div className=&quot;mb-2&quot;&gt;Sélectionnez les sillons de substitution à activer :&lt;/div&gt;&#10;                    &lt;div className=&quot;list-group&quot;&gt;&#10;                      {sillonsSub.map(s =&gt; (&#10;                        &lt;label key={s.id} className=&quot;list-group-item d-flex align-items-center gap-2&quot;&gt;&#10;                          &lt;input type=&quot;checkbox&quot; className=&quot;form-check-input&quot; checked={form.sillons_substitution.includes(s.id)} onChange={e =&gt; setForm(f =&gt; ({ ...f, sillons_substitution: e.target.checked ? [...f.sillons_substitution, s.id] : f.sillons_substitution.filter(id =&gt; id !== s.id) }))} /&gt;&#10;                          &lt;span&gt;{`[${s.train_number || ('#'+s.id)}] (${(s.departure_time || s.departureTime || '').slice(0,5)} / ${(s.arrival_time || s.arrivalTime || '').slice(0,5)})`}&lt;/span&gt;&#10;                        &lt;/label&gt;&#10;                      ))}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;        {((step === 3 &amp;&amp; form.type !== 'travaux') || (step === 5 &amp;&amp; form.type === 'travaux')) &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;h5&quot;&gt;Récapitulatif&lt;/h2&gt;&#10;            &lt;ul className=&quot;list-group mb-3&quot;&gt;&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Type :&lt;/strong&gt; {PERTURB_TYPES.find(t =&gt; t.value === form.type)?.label}&lt;/li&gt;&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Ligne :&lt;/strong&gt; {(() =&gt; { const L = lignes.find(l =&gt; String(l.id) === String(form.ligne_id)); return L ? `${L.depart_name || 'Inconnue'} &lt;&gt; ${L.arrivee_name || 'Inconnue'}` : form.ligne_id; })()}&lt;/li&gt;&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Date de début :&lt;/strong&gt; {form.date_debut} {form.heure_debut}&lt;/li&gt;&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Date de fin :&lt;/strong&gt; {form.date_fin} {form.heure_fin}&lt;/li&gt;&#10;              {form.type === 'travaux' &amp;&amp; (&#10;                &lt;&gt;&#10;                  &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Jours de travaux :&lt;/strong&gt; {form.jours.map(j =&gt; JOURS[j]).join(', ')}&lt;/li&gt;&#10;                  &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Impact circulation :&lt;/strong&gt; {form.impact_circulation ? 'Oui' : 'Non'}&lt;/li&gt;&#10;                  {form.impact_circulation &amp;&amp; (&#10;                    &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Sillons non circulants :&lt;/strong&gt; {form.sillons_impactes.length ? form.sillons_impactes.map(id =&gt; { const s = sillons.find(si =&gt; si.id === id); return s ? (`[${s.train_number || ('#'+s.id)}] (${(s.departure_time || s.departureTime || '').slice(0,5)} / ${(s.arrival_time || s.arrivalTime || '').slice(0,5)})`) : `#${id}`; }).join(', ') : 'Aucun'}&lt;/li&gt;&#10;                  )}&#10;                  &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Substitutions :&lt;/strong&gt; {form.substitutions ? 'Oui' : 'Non'}&lt;/li&gt;&#10;                  {form.substitutions &amp;&amp; (&#10;                    &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Sillons de substitution :&lt;/strong&gt; {form.sillons_substitution.length ? form.sillons_substitution.map(id =&gt; { const s = sillonsSub.find(si =&gt; si.id === id); return s ? (`[${s.train_number || ('#'+s.id)}] (${(s.departure_time || s.departureTime || '').slice(0,5)} / ${(s.arrival_time || s.arrivalTime || '').slice(0,5)})`) : `#${id}`; }).join(', ') : 'Aucun'}&lt;/li&gt;&#10;                  )}&#10;                &lt;/&gt;&#10;              )}&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Titre :&lt;/strong&gt; {form.titre}&lt;/li&gt;&#10;              &lt;li className=&quot;list-group-item&quot;&gt;&lt;strong&gt;Contenu :&lt;/strong&gt; &lt;span dangerouslySetInnerHTML={{__html: form.contenu}} /&gt;&lt;/li&gt;&#10;            &lt;/ul&gt;&#10;            &lt;button type=&quot;submit&quot; className=&quot;btn btn-success&quot; disabled={saving}&gt;{saving ? 'Mise à jour…' : 'Mettre à jour la perturbation'}&lt;/button&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        &lt;div className=&quot;d-flex justify-content-between mt-4&quot;&gt;&#10;          &lt;button type=&quot;button&quot; className=&quot;btn btn-outline-secondary&quot; onClick={prevStep} disabled={step === 0}&gt;Précédent&lt;/button&gt;&#10;          {((form.type !== 'travaux' &amp;&amp; step &lt; 3) || (form.type === 'travaux' &amp;&amp; step &lt; 5)) &amp;&amp; (&#10;            &lt;button&#10;              type=&quot;button&quot;&#10;              className=&quot;btn btn-primary&quot;&#10;              onClick={nextStep}&#10;              disabled={&#10;                (step === 0 &amp;&amp; (!form.type || !form.ligne_id)) ||&#10;                (step === 1 &amp;&amp; (&#10;                  !form.date_debut ||&#10;                  !form.date_fin ||&#10;                  (form.type === 'travaux' &amp;&amp; (&#10;                    form.jours.length === 0 ||&#10;                    !form.heure_debut ||&#10;                    !form.heure_fin&#10;                  ))&#10;                )) ||&#10;                (step === 2 &amp;&amp; (!form.titre.trim() || !form.contenu || form.contenu === '&lt;p&gt;&lt;br&gt;&lt;/p&gt;')) ||&#10;                (step === 3 &amp;&amp; form.type === 'travaux' &amp;&amp; form.impact_circulation &amp;&amp; sillons.length &gt; 0 &amp;&amp; form.sillons_impactes.length === 0) ||&#10;                (step === 4 &amp;&amp; form.type === 'travaux' &amp;&amp; form.substitutions &amp;&amp; sillonsSub.length &gt; 0 &amp;&amp; form.sillons_substitution.length === 0)&#10;              }&#10;            &gt;&#10;              Suivant&#10;            &lt;/button&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>